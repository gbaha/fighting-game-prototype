import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.io.File;

public class Roo extends Player
{
	public enum RooState implements State
	{
		PlayerState, OVERHEAD_MP, GUTPUNCH_HP, FIREBALL_LAUNCH, FIREBALL_RECOVER, TATSU_START, TATSU_SPIN, TATSU_RECOVER, DP, DP_RECOVER, DONKEYKICK, DONKEYKICK_RECOVER, B_TAUNT;
		
		public String getState()
		{
			return name();
		}
		
		public int getPosition()
		{
			return Player.PlayerState.values().length+Puppet.PuppetState.values().length+ordinal()-2;
		}
	}
	
	public Roo(int x, int y, boolean r)
	{
		super(x,y,100,250,150,50,/*100,*/6,3,2,2,50,r);
		sheet = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/roo.gif"));
//		sheet = Toolkit.getDefaultToolkit().getImage(System.getProperty("user.dir")+"\\resources\\roo.gif");
		flinchPoints = new int[]{1,0,0,0,0,1,1,1,0};
		spriteParams = new int[]{345,180,290,178};
		
		//IDLE
		hitboxArchiver.add(new int[][]{new int[]{0,0,0,0,4},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-27,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-37,53,50,	-32,-10,150,55,	-32,50,125,100,	-42,155,160,95},
			new int[]{32,-42,53,50,	-32,-15,150,55,	-32,47,125,100,	-42,155,160,95},
			new int[]{32,-42,53,50,	-32,-15,150,55,	-32,47,125,100,	-42,155,160,95},
			new int[]{32,-42,53,50,	-32,-15,150,55,	-32,47,125,100,	-42,155,160,95},
			new int[]{32,-42,53,50,	-32,-15,150,55,	-32,47,125,100,	-42,155,160,95},
			new int[]{32,-42,53,50,	-32,-15,150,55,	-32,47,125,100,	-42,155,160,95},
			new int[]{32,-37,53,50,	-32,-10,150,55,	-32,50,125,100,	-42,155,160,95},
			new int[]{32,-27,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//CROUCH
		hitboxArchiver.add(new int[][]{new int[]{1,4,4,0,9},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,175,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-10,125,35,	-32,20,175,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-15,125,35,	-32,15,175,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-10,125,35,	-32,20,175,40,	-45,60,185,90}});
		//STANDING
		hitboxArchiver.add(new int[][]{new int[]{1,3,0,1,1},
			new int[]{32,-33,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{45,17,53,50,	-27,47,135,45,	-27,80,170,60,	-45,155,185,95},
			new int[]{32,70,53,50,	-32,85,125,45,	-32,125,190,40,	-45,160,185,90},
			new int[]{32,65,53,50,	-32,90,125,35,	-32,120,175,40,	-45,160,185,90}});
		//CROUCHING
		hitboxArchiver.add(new int[][]{new int[]{1,0,3,0,1},
			new int[]{32,-133,53,50,	-32,-100,150,55,	-32,-45,125,100,	-42,55,160,95},
			new int[]{45,-83,53,50,	-27,-53,135,45,	-27,-20,170,60,	-45,55,185,95},
			new int[]{32,-30,53,50,	-32,-15,125,45,	-32,25,190,40,	-45,60,185,90},
			new int[]{32,-35,53,50,	-32,-10,125,35,	-32,20,175,40,	-45,60,185,90}});
		//WALK FORWARD
		hitboxArchiver.add(new int[][]{new int[]{2,0,0,0,4},
			new int[]{35,-32,53,50,	-32,0,155,55,	-32,55,125,90,	-82,145,200,105},
			new int[]{35,-32,53,50,	-32,0,155,55,	-32,55,125,90,	-92,145,200,105},
			new int[]{35,-42,53,50,	-32,-12,155,55,	-32,49,125,90,	-72,145,160,105},
			new int[]{35,-42,53,50,	-32,-20,155,55,	-32,45,125,90,	-72,145,160,105},
			new int[]{35,-47,53,50,	-32,-17,155,55,	-32,47,125,90,	-42,145,140,105},
			new int[]{35,-47,53,50,	-32,-17,155,55,	-32,47,125,90,	-32,145,150,105},
			new int[]{35,-50,53,50,	-32,-17,155,55,	-32,47,125,90,	-32,145,150,105},
			new int[]{35,-50,53,50,	-32,-17,155,55,	-32,47,125,90,	-32,145,175,105},
			new int[]{35,-45,53,50,	-32,-12,155,55,	-32,49,125,90,	-52,145,200,105},
			new int[]{35,-37,53,50,	-32,0,155,55,	-32,55,125,90,	-52,145,200,105}});
		//WALK BACKWARD
		hitboxArchiver.add(new int[][]{new int[]{3,0,0,0,4},
			new int[]{35,-32,53,50,	-32,0,155,55,	-32,55,125,90,	-32,145,190,105},
			new int[]{35,-32,53,50,	-32,0,155,55,	-32,55,125,90,	-32,145,200,105},
			new int[]{35,-42,53,50,	-32,-17,155,55,	-32,47,125,90,	-32,145,180,105},
			new int[]{35,-42,53,50,	-32,-20,155,55,	-32,45,125,90,	-32,145,160,105},
			new int[]{35,-47,53,50,	-32,-17,155,55,	-32,47,125,90,	-32,145,150,105},
			new int[]{35,-47,53,50,	-32,-17,155,55,	-32,47,125,90,	-32,145,135,105},
			new int[]{35,-50,53,50,	-32,-17,155,55,	-32,47,125,90,	-32,145,135,105},
			new int[]{35,-50,53,50,	-32,-20,155,55,	-32,45,125,90,	-62,145,185,105},
			new int[]{35,-45,53,50,	-32,-17,155,55,	-32,47,125,90,	-62,145,185,105},
			new int[]{35,-37,53,50,	-32,0,155,55,	-32,55,125,90,	-62,145,200,105}});
		//FALL NEUTRAL
		hitboxArchiver.add(new int[][]{new int[]{4,5,9,0,2},
			new int[]{47,-47,53,50,	-48,-25,160,86,	-10,25,152,90,	-10,115,120,66},
			new int[]{47,-47,53,50,	-48,-25,150,86,	-10,47,152,80,	-10,80,100,105},
			new int[]{40,-50,53,50,	-48,-25,150,86,	-10,45,152,80,	-10,125,108,95},
			new int[]{35,-56,53,50,	-48,-25,136,80,	-10,38,150,80,	-10,118,103,125},
			new int[]{22,-66,53,50,	-48,-25,136,70,	0,30,145,80,	0,110,100,155},
			new int[]{22,-66,53,50,	-48,-25,136,70,	0,30,145,80,	0,110,100,155}});
		//FALL FORWARD
		hitboxArchiver.add(new int[][]{new int[]{5,1,10,0,2},
			new int[]{111,-11,53,50,	-20,-20,100,85,	25,-8,115,125,	-20,65,140,75,	-35,140,90,85},
			new int[]{95,50,58,45,	-36,0,160,80,	0,0,150,75,	-32,75,150,70},
			new int[]{63,85,58,45,	85,20,55,80,	-15,0,122,90,	-56,56,120,70},
			new int[]{5,92,52,45,	42,32,90,90,	42,5,65,90,	-35,-15,88,116},
			new int[]{-42,66,42,45,	0,58,110,68,	-33,9,145,60,	5,-35,70,45},
			new int[]{-60,42,50,45,	-30,45,142,75,	-43,12,105,75,	-10,-15,140,65},
			new int[]{-60,-30,53,50,	-60,15,115,90,	-44,-15,90,85,	55,6,105,182},
			new int[]{22,-60,53,50,	-55,-25,135,70,	-5,45,140,70,	45,115,75,130},
			new int[]{40,-58,53,50,	-40,-28,128,74,	0,46,132,44,	20,90,100,140},
			new int[]{42,-65,53,50,	-35,-30,128,75,	5,45,136,100,	5,145,100,110}});
		//FALL BACKWARD
		hitboxArchiver.add(new int[][]{new int[]{5,7,0,1,2},
			new int[]{51,-53,53,50,	-36,-30,126,80,	-10,52,150,90,	-20,142,100,103},
			new int[]{111,-11,53,50,	-20,-20,100,85,	25,-8,115,125,	-20,65,140,75,	-35,140,90,85},
			new int[]{95,50,58,45,	-36,0,160,80,	0,0,150,75,	-32,75,150,70},
			new int[]{63,85,58,45,	85,20,55,80,	-15,0,122,90,	-56,56,120,70},
			new int[]{5,92,52,45,	42,32,90,90,	42,5,65,90,	-35,-15,88,116},
			new int[]{-42,66,42,45,	0,58,110,68,	-33,9,145,60,	5,-35,70,45},
			new int[]{-60,42,50,45,	-30,45,142,75,	-43,12,105,75,	-10,-15,140,65},
			new int[]{-60,-30,53,50,	-60,15,115,90,	-44,-15,90,85,	55,6,105,182}});
		//LANDING
		hitboxArchiver.add(new int[][]{new int[]{1,2,0,1,4},
			new int[]{45,17,53,50,	-27,47,135,45,	-27,80,170,60,	-45,155,185,95},
			new int[]{32,70,53,50,	-32,85,125,45,	-32,125,190,40,	-45,160,185,90},
			new int[]{32,65,53,50,	-32,90,125,35,	-32,120,175,40,	-45,160,185,90}});
		//PREJUMP
		hitboxArchiver.add(new int[][]{new int[]{1,0,1,0,4},
			new int[]{45,17,53,50,	-27,47,135,45,	-27,80,170,60,	-45,155,185,95},
			new int[]{32,65,53,50,	-32,90,125,35,	-32,120,175,40,	-45,160,185,90}});
		//JUMP NEUTRAL
		hitboxArchiver.add(new int[][]{new int[]{4,0,4,0,2},
			new int[]{22,-66,53,50,	-62,-66,200,66,	-17,0,100,60,	-12,60,90,175},
			new int[]{22,-66,53,50,	-62,-66,200,66,	-17,0,100,60,	-12,60,90,175},
			new int[]{29,-60,53,50,	-52,-60,200,70,	-10,10,100,60,	-10,70,140,150},
			new int[]{40,-56,53,50,	-38,-25,180,70,	-10,10,100,60,	-20,70,155,136},
			new int[]{50,-42,53,50,	-48,-25,170,86,	-10,25,160,60,	-10,70,150,101}});
		//JUMP FORWARD
		hitboxArchiver.add(new int[][]{new int[]{5,0,0,0,1},
			new int[]{51,-53,53,50,	-36,-30,126,80,	-10,52,150,90,	-20,142,100,103}});
		//JUMP BACKWARD
		hitboxArchiver.add(new int[][]{new int[]{5,8,8,0,1},
			new int[]{22,-60,53,50,	-55,-25,135,70,	-5,45,140,70,	45,115,75,130}});
		//STANDING GUARD
		hitboxArchiver.add(new int[][]{new int[]{6,0,0,0,1},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//CROUCHING GUARD
		hitboxArchiver.add(new int[][]{new int[]{7,0,0,0,1},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,175,40,	-45,60,185,90}});
		//JUMPING GUARD
		hitboxArchiver.add(new int[][]{new int[]{8,0,0,0,1},
			new int[]{22,-70,100,68,	-20,-40,100,70,	-20,30,152,72,	25,95,78,50}});
		//STANDING FLINCH(MID)
		hitboxArchiver.add(new int[][]{new int[]{9,0,4,0,2},
			new int[]{0,-23,53,50,	-64,0,135,90,	-48,95,135,50,	-42,150,160,100},
			new int[]{-80,-23,53,50,	-64,15,175,90,	-32,95,135,50,	-42,150,160,100},
			new int[]{-64,-12,53,50,	-64,15,175,90,	-32,95,135,50,	-42,150,160,100},
			new int[]{8,-30,53,50,	-32,0,150,75,	-32,80,125,70,	-52,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,75,	-32,75,125,80,	-42,155,160,95}});
		//STANDING FLINCH(LOW)
		hitboxArchiver.add(new int[][]{new int[]{10,0,5,0,2},
			new int[]{24,0,53,50,	-48,15,165,75,	-72,95,135,55,	-42,155,150,95},
			new int[]{0,33,53,50,	-80,33,200,85,	-96,95,135,55,	-72,155,150,95},
			new int[]{16,12,53,50,	-72,18,175,90,	-56,100,135,55,	-56,155,150,95},
			new int[]{32,0,53,50,	-64,12,175,75,	-48,95,135,50,	-56,155,175,95},
			new int[]{32,-23,53,50,	-32,0,150,75,	-32,80,125,70,	-52,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,75,	-32,75,125,80,	-42,155,160,95}});
		//STANDING FLINCH(HIGH)
		hitboxArchiver.add(new int[][]{new int[]{11,0,3,0,2},
			new int[]{56,50,53,50,	-56,33,200,85,	-8,95,100,50,	-32,150,160,100},
			new int[]{56,60,53,50,	-56,43,200,85,	-16,105,110,50,	-32,150,160,100},
			new int[]{56,60,53,50,	-48,33,180,110,	-16,105,115,50,	-32,150,160,100},
			new int[]{56,50,53,50,	-32,23,160,110,	-32,95,150,50,	-32,150,160,100}});
		//CROUCHING FLINCH
		hitboxArchiver.add(new int[][]{new int[]{12,0,3,0,2},
			new int[]{-104,-30,53,50,	-80,-5,125,35,	-112,25,175,40,	-45,60,185,90},
			new int[]{-96,-30,53,50,	-80,-5,125,35,	-96,25,175,40,	-45,60,185,90},
			new int[]{-80,-30,53,50,	-80,-5,125,35,	-96,25,175,40,	-45,60,185,90},
			new int[]{-16,-40,53,50,	-64,-5,125,35,	-64,25,175,40,	-45,60,185,90}});
		//TRIP FLINCH(GROUND)
		hitboxArchiver.add(new int[][]{new int[]{14,0,4,0,2},
			new int[]{-8,-43,53,50,	-88,-15,170,75,	-8,60,125,60,	-42,120,160,130},
			new int[]{-32,0,53,50,	-96,35,190,80,	0,80,125,75,	120,100,120,100},
			new int[]{-40,23,53,50,	-72,50,150,75,	-24,80,125,80,	80,20,130,110},
			new int[]{-40,53,53,50,	-72,80,150,90,	-24,120,105,80,	20,20,150,110},
			new int[]{-40,73,53,50,	-48,100,100,90,	-24,140,105,80,	15,20,95,120}});
		//TRIP FLINCH(AIR)
		hitboxArchiver.add(new int[][]{new int[]{13,2,7,0,2},
			new int[]{-96,5,53,50,	-48,12,170,65,	48,45,125,50,	100,75,95,115},
			new int[]{-96,35,53,50,	-56,25,170,65,	48,45,125,50,	120,65,85,115},
			new int[]{-104,50,53,50,	-64,25,100,80,	40,35,110,60,	130,45,100,90},
			new int[]{-104,50,53,50,	-64,25,100,80,	40,35,110,60,	130,45,100,90},
			new int[]{-104,90,53,50,	-64,25,100,100,	40,40,110,60,	130,45,100,90},
			new int[]{-88,120,53,50,	-64,35,100,120,	40,30,100,70,	140,30,100,90}});
		//MIDAIR FLINCH(STANDARD)
		hitboxArchiver.add(new int[][]{new int[]{10,0,5,0,2},
			new int[]{24,0,53,50,	-48,15,165,75,	-72,95,135,55,	-42,155,150,95},
			new int[]{0,33,53,50,	-80,33,200,85,	-96,95,135,55,	-72,155,150,95},
			new int[]{16,12,53,50,	-72,18,175,90,	-56,100,135,55,	-56,155,150,95},
			new int[]{32,0,53,50,	-64,12,175,75,	-48,95,135,50,	-56,155,175,95},
			new int[]{32,-23,53,50,	-32,0,150,75,	-32,80,125,70,	-52,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,75,	-32,75,125,80,	-42,155,160,95}});
		//MIDAIR FLINCH(LAUNCH)
		hitboxArchiver.add(new int[][]{new int[]{10,0,4,0,2},
			new int[]{24,0,53,50,	-48,15,165,75,	-72,95,135,55,	-42,155,150,95},
			new int[]{0,33,53,50,	-80,33,200,85,	-96,95,135,55,	-72,155,150,95},
			new int[]{16,12,53,50,	-72,18,175,90,	-56,100,135,55,	-56,155,150,95},
			new int[]{32,0,53,50,	-64,12,175,75,	-48,95,135,50,	-56,155,175,95},
	//		new int[]{32,-23,53,50,	-32,0,150,75,	-32,80,125,70,	-52,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,75,	-32,75,125,80,	-42,155,160,95}});
		//MIDAIR FLINCH(SPIKE)
		hitboxArchiver.add(new int[][]{new int[]{14,2,4,0,2},
			new int[]{-40,23,53,50,	-72,50,150,75,	-24,80,125,80,	80,20,130,110},
			new int[]{-40,53,53,50,	-72,80,150,90,	-24,120,105,80,	20,20,150,110},
			new int[]{-40,73,53,50,	-48,100,100,90,	-24,140,105,80,	15,20,95,120}});
		//KNOCKDOWN
		hitboxArchiver.add(new int[][]{new int[]{15,0,9,0,2},
			new int[]{-96,0,53,50,	-64,-15,100,70,	-48,-55,105,55,	-172,-100,120,95},
			new int[]{-120,10,53,50,	-64,-15,100,70,	-56,-55,105,55,	-182,-55,120,95},
			new int[]{-120,10,53,50,	-64,-15,100,70,	-64,-55,105,55,	-182,-70,120,105},
			new int[]{-104,0,53,50,	-64,-15,75,70,	-8,-35,90,90,	-12,-135,100,95},
			new int[]{-104,0,53,50,	-64,-15,110,70,	-56,-45,105,45,	-132,-110,100,95},
			new int[]{-104,0,53,50,	-64,-15,110,70,	48,-35,75,90,	122,-75,120,100},
			new int[]{-104,-15,53,50,	-64,-40,110,70,	48,-40,110,70,	142,-15,120,70},
			new int[]{-104,-15,53,50,	-64,-40,110,70,	48,-50,110,70,	142,-35,100,90},
			new int[]{-96,-25,53,50,	-64,-30,110,70,	48,-40,110,70,	142,-35,100,90},
			new int[]{-96,-25,53,50,	-64,-15,100,70,	40,-25,100,80,	142,-35,110,90}});
		//FALLING
		hitboxArchiver.add(new int[][]{new int[]{13,2,7,0,2},
			new int[]{-96,5,53,50,	-48,12,170,65,	48,45,125,50,	100,75,95,115},
			new int[]{-96,35,53,50,	-56,25,170,65,	48,45,125,50,	120,65,85,115},
			new int[]{-104,50,53,50,	-64,25,100,80,	40,35,110,60,	130,45,100,90},
			new int[]{-104,50,53,50,	-64,25,100,80,	40,35,110,60,	130,45,100,90},
			new int[]{-104,90,53,50,	-64,25,100,100,	40,40,110,60,	130,45,100,90},
			new int[]{-88,120,53,50,	-64,35,100,120,	40,30,100,70,	140,30,100,90}});
		//GUARD BREAK(GROUND)
		hitboxArchiver.add(new int[][]{new int[]{16,0,7,0,2},
			new int[]{-32,-33,53,50,	-64,0,150,55,	-64,55,125,100,	-42,155,160,95},
			new int[]{-48,-12,53,50,	-88,12,135,90,	-48,100,125,55,	-42,155,160,95},
			new int[]{-88,-12,53,50,	-88,12,150,90,	-48,100,125,55,	-42,155,160,95},
			new int[]{-112,0,53,50,	-112,12,170,75,	-56,95,125,55,	-62,160,160,90},
			new int[]{-136,12,53,50,	-120,25,120,80,	-56,105,80,55,	-62,160,110,90},
			new int[]{-168,32,53,50,	-128,32,110,80,	-72,85,80,70,	-72,160,110,90},
			new int[]{-168,32,53,50,	-128,32,110,80,	-72,85,80,70,	-72,160,110,90},
			new int[]{-168,32,53,50,	-128,32,110,80,	-72,85,80,70,	-72,160,110,90}});
		//GUARD BREAK(AIR)
		hitboxArchiver.add(new int[][]{new int[]{17,0,8,0,3},
			new int[]{-24,-45,53,50,	-32,0,150,55,	-8,55,115,75,	-42,130,180,120},
			new int[]{-40,-45,53,50,	-32,-20,95,40,	-24,20,150,95,	-42,115,185,120},
			new int[]{-56,-45,53,50,	-56,-30,160,100,	0,70,130,50,	-8,120,150,115},
			new int[]{-64,-45,53,50,	-56,-30,130,100,	0,70,100,40,	40,110,110,115},
			new int[]{-72,-35,53,50,	-40,-15,90,100,	0,60,115,45,	24,105,180,115},
			new int[]{-80,-35,53,50,	-72,-15,135,100,	-48,75,140,45,	48,105,150,100},
			new int[]{-88,-30,53,50,	-96,-15,115,100,	-64,20,170,125,	32,105,180,80},
			new int[]{-96,-20,53,50,	-88,25,175,110,	24,75,100,100,	56,110,145,95},
			new int[]{-104,-5,53,50,	-80,25,160,75,	8,75,135,100,	104,90,95,120},
			new int[]{-112,25,53,50,	-80,25,80,110,	0,40,105,100,	104,90,105,120},
			new int[]{-120,40,53,50,	-80,20,100,135,	24,20,95,145,	120,80,105,115},
			new int[]{-120,50,53,50,	-72,40,120,95,	-32,75,130,110,	100,80,120,125},
			new int[]{-128,75,53,50,	-72,70,45,85,	-24,85,110,110,	88,100,140,100},
			new int[]{-128,100,53,50,	-72,85,45,85,	-24,85,110,110,	88,100,140,100}});
		//THROW BREAK
		hitboxArchiver.add(new int[][]{new int[]{20,0,5,0,3},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//GRABBED(ARMS)
		hitboxArchiver.add(new int[][]{new int[]{18,0,0,0,2},
			new int[]{-32,0,125,125,	-32,74,125,125,	-32,147,125,125}});
		//GRABBED(HEAD)
		hitboxArchiver.add(new int[][]{new int[]{18,1,1,0,2},
			new int[]{-32,0,125,125,	-32,74,125,125,	-32,147,125,125}});
		//GRABBED(BODY)
		hitboxArchiver.add(new int[][]{new int[]{18,2,2,0,2},
			new int[]{-32,0,125,125,	-32,74,125,125,	-32,147,125,125}});
		//GRABBED(LEGS)
		hitboxArchiver.add(new int[][]{new int[]{18,3,3,0,2},
			new int[]{-32,0,125,125,	-32,74,125,125,	-32,147,125,125}});
		
		//DASH FORWARD
		hitboxArchiver.add(new int[][]{new int[]{19,0,5,0,3},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//DASH BACKWARD
		hitboxArchiver.add(new int[][]{new int[]{20,0,5,0,3},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//HOMING PREJUMP
		hitboxArchiver.add(new int[][]{new int[]{1,0,2,0,4},
			new int[]{45,17,53,50,	-27,47,135,45,	-27,80,170,60,	-45,155,185,95},
			new int[]{32,65,53,50,	-32,90,125,35,	-32,120,175,40,	-45,160,185,90},
			new int[]{32,65,53,50,	-32,90,125,35,	-32,120,175,40,	-45,160,185,90}});
		//HOMING JUMP
		hitboxArchiver.add(new int[][]{new int[]{5,0,0,0,1},
			new int[]{51,-53,53,50,	-36,-30,126,80,	-10,52,150,90,	-20,142,100,103}});
		
		//THROW START
		hitboxArchiver.add(new int[][]{new int[]{39,0,7,0,3},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//THROW HOLD
		hitboxArchiver.add(new int[][]{new int[]{23,4,4,0,4},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//THROW HIT
		hitboxArchiver.add(new int[][]{new int[]{25,0,9,0,1},
			new int[]{50,-28,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{58,-28,63,50,	-24,0,160,55,	-24,55,170,100,	-34,155,190,95},
			new int[]{58,-28,63,50,	-24,0,160,55,	-24,55,170,100,	-34,155,190,95},
			new int[]{58,-40,63,50,	-24,0,160,55,	-24,55,170,100,	-34,155,190,95},
			new int[]{58,-40,63,50,	-24,0,160,55,	-24,55,170,100,	-34,155,190,95},
			new int[]{58,-40,63,50,	-24,0,160,55,	-24,55,250,100,	-34,155,190,95},
			new int[]{58,-40,63,50,	-24,0,160,55,	-24,55,250,100,	-34,155,190,95},
			new int[]{58,-40,63,50,	-24,0,160,55,	-24,55,170,100,	-34,155,190,95},
			new int[]{58,-28,63,50,	-24,0,160,55,	-24,55,170,100,	-34,155,190,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//THROW FORWARD
		hitboxArchiver.add(new int[][]{new int[]{40,0,12,0,2},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//THROW UPWARD
		hitboxArchiver.add(new int[][]{new int[]{41,0,6,0,3},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//THROW DOWNWARD
		hitboxArchiver.add(new int[][]{new int[]{41,0,6,0,3},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		
		//SLIP(PARRY)
		hitboxArchiver.add(new int[][]{new int[]{42,0,6,0,2},
			new int[]{32,13,53,50,	-32,55,125,40,	-32,95,125,50,	-72,145,225,105,	93,55,115,75},
			new int[]{32,13,53,50,	-32,55,125,40,	-32,95,125,50,	-72,145,225,105,	93,55,115,75},
			new int[]{32,13,53,50,	-32,55,125,40,	-32,95,125,50,	-72,145,225,105,	93,55,115,75},
			new int[]{32,13,53,50,	-32,55,125,40,	-32,95,125,50,	-72,145,225,105,	93,55,115,75},
			new int[]{32,13,53,50,	-32,55,125,40,	-32,95,125,50,	-72,145,225,105,	93,55,115,75},
			new int[]{32,13,53,50,	-32,55,125,40,	-32,95,125,50,	-72,145,225,105,	93,55,115,75},
			new int[]{32,13,53,50,	-32,55,125,40,	-32,95,125,50,	-72,145,225,105,	93,55,115,75}});
		//SLIP(DODGE A)
		hitboxArchiver.add(new int[][]{new int[]{43,0,0,0,2},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//SLIP(DODGE B)
		hitboxArchiver.add(new int[][]{new int[]{43,1,1,0,2},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//SLIP(DODGE C)
		hitboxArchiver.add(new int[][]{new int[]{43,2,2,0,2},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//SLIP(DODGE D)
		hitboxArchiver.add(new int[][]{new int[]{43,3,3,0,2},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//SLIP(DODGE E)
		hitboxArchiver.add(new int[][]{new int[]{43,4,4,0,2},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		
		//TAUNT
		hitboxArchiver.add(new int[][]{new int[]{54,0,3,0,3},
			new int[]{32,13,53,50,	-32,30,150,40,	-32,80,125,60,	-62,150,190,100},
			new int[]{32,13,53,50,	-32,55,180,40,	-32,95,125,50,	-72,145,225,105,	148,20,60,75},
			new int[]{32,13,53,50,	-32,55,125,40,	-32,95,125,50,	-72,145,225,105,	93,55,115,75},
			new int[]{32,13,53,50,	-32,55,125,40,	-32,95,125,50,	-72,145,225,105,	93,55,115,75},
			new int[]{32,13,53,50,	-32,55,125,40,	-32,95,125,50,	-72,145,225,105,	93,55,115,75}});
		
		//STANDING LP
		hitboxArchiver.add(new int[][]{new int[]{21,0,4,0,2},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95, 125,0,120,45},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95, 125,0,120,45},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//STANDING MP
		hitboxArchiver.add(new int[][]{new int[]{22,0,8,0,2},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95, 125,10,100,42},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95, 125,10,100,42},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95, 125,10,100,42},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95, 125,10,100,42},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//STANDING HP
		hitboxArchiver.add(new int[][]{new int[]{23,0,13,0,2},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{52,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{42,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//STANDING LK
		hitboxArchiver.add(new int[][]{new int[]{24,0,6,0,2},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,60,50,	-32,0,150,70,	-32,75,125,75,	-42,155,160,95},
			new int[]{32,-23,60,50,	-32,0,150,90,	-32,100,250,75,	-42,165,290,85},
			new int[]{32,-23,60,50,	-32,0,150,90,	-32,100,250,75,	-42,165,290,85},
			new int[]{32,-23,60,50,	-32,0,150,70,	-32,75,125,75,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//STANDING MK
		hitboxArchiver.add(new int[][]{new int[]{25,0,9,0,2},
			new int[]{50,-28,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{58,-28,63,50,	-24,0,160,55,	-24,55,170,100,	-34,155,190,95},
			new int[]{58,-28,63,50,	-24,0,160,55,	-24,55,170,100,	-34,155,190,95},
			new int[]{58,-40,63,50,	-24,0,160,55,	-24,55,170,100,	-34,155,190,95},
			new int[]{58,-40,63,50,	-24,0,160,55,	-24,55,170,100,	-34,155,190,95},
			new int[]{58,-40,63,50,	-24,0,160,55,	-24,55,250,100,	-34,155,190,95},
			new int[]{58,-40,63,50,	-24,0,160,55,	-24,55,250,100,	-34,155,190,95},
			new int[]{58,-40,63,50,	-24,0,160,55,	-24,55,170,100,	-34,155,190,95},
			new int[]{58,-28,63,50,	-24,0,160,55,	-24,55,170,100,	-34,155,190,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//STANDING HK
		hitboxArchiver.add(new int[][]{new int[]{26,0,24,0,1},
			new int[]{0,-23,58,50,	-32,20,150,55,	-22,55,160,110,	-22,175,160,75},
			new int[]{0,-23,58,50,	-32,20,150,55,	-22,55,160,110,	-22,175,160,75},
			new int[]{0,-23,58,50,	-32,20,150,55,	-22,55,160,110,	-22,175,160,75},
			new int[]{0,-20,58,50,	-32,8,150,55,	-22,55,180,110,	-22,175,160,75},
			new int[]{0,-20,58,50,	-32,8,150,55,	-22,55,180,110,	-22,175,160,75},
			new int[]{0,-20,58,50,	-32,8,150,55,	-22,55,180,110,	-22,175,160,75},
			new int[]{-22,-20,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75},
			new int[]{-22,-20,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75,	120,-10,80,80},
			new int[]{-22,-20,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75,	120,-10,80,80},
			new int[]{-22,-20,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75,	120,-10,80,80},
			new int[]{-22,-20,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75,	120,-10,80,80},
			new int[]{-22,-20,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75,	120,-10,80,80},
			new int[]{-22,-20,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75,	120,-10,80,80},
			new int[]{-22,-20,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75,	120,-10,80,80},
			new int[]{-22,-20,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75,	120,-10,80,80},
			new int[]{22,-20,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75},
			new int[]{22,-20,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75},
			new int[]{22,-20,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75},
			new int[]{22,-23,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75},
			new int[]{22,-23,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75},
			new int[]{22,-23,58,50,	-22,8,150,55,	-22,50,180,110,	-22,175,160,75},
			new int[]{50,-28,58,50,	-32,8,150,55,	-22,55,160,110,	-22,175,160,75},
			new int[]{50,-28,58,50,	-32,8,150,55,	-22,55,160,110,	-22,175,160,75},
			new int[]{50,-28,58,50,	-32,8,150,55,	-22,55,160,110,	-22,175,160,75},
			new int[]{50,-28,58,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
			
		//CROUCHING LP
		hitboxArchiver.add(new int[][]{new int[]{27,0,4,0,2},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90,	125,-5,80,40},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90,	125,-5,80,40},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90,	125,-5,80,40},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90}});
		//CROUCHING MP
		hitboxArchiver.add(new int[][]{new int[]{28,0,6,0,2},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90,	125,-5,80,40},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90,	125,-5,80,40},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90,	125,-5,80,40},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90}});
		//CROUCHING HP
		hitboxArchiver.add(new int[][]{new int[]{29,0,12,0,2},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-80,53,50,	-32,-45,150,40,	-32,0,135,55,	-45,60,185,90},
			new int[]{8,-115,53,50,	-32,-85,135,40,	-32,-40,135,90,	-45,60,185,90},
			new int[]{8,-115,53,50,	-32,-85,135,40,	-32,-40,135,90,	-45,60,185,90,	50,-180,70,100},
			new int[]{8,-115,53,50,	-32,-85,135,40,	-32,-40,135,90,	-45,60,185,90,	50,-180,70,100},
			new int[]{8,-115,53,50,	-32,-85,135,40,	-32,-40,135,90,	-45,60,185,90,	50,-180,70,100},
			new int[]{8,-115,53,50,	-32,-85,135,40,	-32,-40,135,90,	-45,60,185,90},
			new int[]{8,-115,53,50,	-32,-85,135,40,	-32,-40,135,90,	-45,60,185,90},
			new int[]{24,-85,53,50,	-32,-55,150,40,	-32,-10,135,65,	-45,60,185,90},
			new int[]{24,-85,53,50,	-32,-55,150,40,	-32,-10,135,65,	-45,60,185,90},
			new int[]{32,-80,53,50,	-32,-45,150,40,	-32,0,135,55,	-45,60,185,90},
			new int[]{32,-80,53,50,	-32,-45,150,40,	-32,0,135,55,	-45,60,185,90}});
		//CROUCHING LK
		hitboxArchiver.add(new int[][]{new int[]{30,0,6,0,2},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90,	150,105,100,45},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90,	150,105,100,45},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90}});
		//CROUCHING MK
		hitboxArchiver.add(new int[][]{new int[]{31,0,10,0,2},
			new int[]{32,-40,53,50,	-16,-5,125,35,	-16,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-16,-5,125,35,	-16,25,135,40,	-30,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90,	130,90,100,60},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90,	130,90,100,60},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90,	130,90,100,60},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90}});
		//CROUCHING HK
		hitboxArchiver.add(new int[][]{new int[]{32,0,33,0,2},
			new int[]{32,-40,53,50,	-16,-5,125,35,	-16,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-16,-5,125,35,	-16,25,135,40,	-45,60,185,90,	150,80,100,70},
			new int[]{32,-40,53,50,	-16,-5,125,35,	-16,25,135,40,	-45,60,185,90,	150,80,100,70},
			new int[]{32,-40,53,50,	-16,-5,125,35,	-16,25,135,40,	-45,60,185,90,	150,80,100,70},
			new int[]{32,-40,53,50,	-16,-5,125,35,	-16,25,135,40,	-45,60,185,90,	150,80,100,70},
			new int[]{32,-40,53,50,	-16,-5,125,35,	-16,25,135,40,	-45,60,185,90,	150,80,100,70},
			new int[]{32,-40,53,50,	-16,-5,125,35,	-16,25,135,40,	-45,60,185,90,	150,80,100,70},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90},
			new int[]{32,-40,53,50,	-32,-5,125,35,	-32,25,135,40,	-45,60,185,90}});
		
		//JUMPING LP
		hitboxArchiver.add(new int[][]{new int[]{33,0,3,0,2},
			new int[]{96,-42,53,50,	0,0,150,55,	-56,36,160,125,	56,-100,100,100},
			new int[]{96,-42,53,50,	0,0,150,55,	-56,36,145,125,	80,-70,100,125},
			new int[]{96,-42,53,50,	0,0,185,50,	-32,32,120,125},
			new int[]{96,-42,53,50,	0,0,185,50,	-32,32,120,125},
			new int[]{96,-42,53,50,	0,0,185,50,	-32,32,120,125},
			new int[]{96,-42,53,50,	0,0,185,50,	-32,32,120,125}});
		//JUMPING MP
		hitboxArchiver.add(new int[][]{new int[]{34,0,7,0,2},
			new int[]{24,-62,53,50,	-32,-30,135,35,	-24,5,185,50,	-24,60,170,55,	-24,120,110,65},
			new int[]{48,-45,53,50,	-72,-30,180,55,	-24,30,130,65, -42,100,180,60},
			new int[]{48,-45,53,50,	0,-30,120,55,	0,30,100,35, -42,70,180,60, 0,135,100,35},
			new int[]{48,-45,53,50,	0,-30,120,55,	0,30,100,35, -42,70,180,60, 0,135,100,35, 140,-60,60,85},
			new int[]{48,-45,53,50,	0,-30,120,55,	0,30,100,35, -42,70,180,60, 0,135,100,35, 140,-60,60,85},
			new int[]{48,-45,53,50,	0,-30,120,55,	0,30,100,35, -42,70,180,60, 0,135,100,35, 140,-60,60,85},
			new int[]{22,-45,53,50,	-32,-20,150,40,	-32,20,190,50,	-32,75,170,60,	-32,140,135,65},
			new int[]{35,-56,53,50,	-48,-25,136,80,	-10,38,150,80,	-10,118,103,125}});
		//JUMPING HP
		hitboxArchiver.add(new int[][]{new int[]{35,0,6,0,2},
			new int[]{40,-62,53,50,	-72,-25,175,35,	0,15,175,35,	-42,55,185,95},
			new int[]{64,-48,53,50,	-32,-25,130,35,	0,20,100,50,	-75,75,215,70},
			new int[]{64,-48,53,50,	-16,-25,130,35,	0,20,100,50,	-75,75,200,70},
			new int[]{64,-48,53,50,	-16,-25,130,35,	0,20,100,50,	-75,75,200,70,	105,-10,100,80},
			new int[]{64,-48,53,50,	-16,-25,130,35,	0,20,100,50,	-75,75,200,70,	105,-10,100,80},
			new int[]{64,-48,53,50,	-16,-25,130,35,	0,20,100,50,	-75,75,200,70,	105,-10,100,80},
			new int[]{48,-48,53,50,	-16,-25,130,35,	0,20,180,50,	-50,75,175,80}});
		//JUMPING LK
		hitboxArchiver.add(new int[][]{new int[]{36,0,6,0,2},
			new int[]{48,-48,53,50,	-24,-30,125,65,	-10,40,150,105},
			new int[]{48,-48,53,50,	-24,-30,125,65,	-10,40,150,105},
			new int[]{56,-36,53,50,	-48,-20,165,55,	-30,40,165,80},
			new int[]{48,-48,53,50,	-48,-20,165,55,	-40,40,160,80},
			new int[]{48,-48,53,50,	-48,-20,165,55,	-40,40,160,80},
			new int[]{48,-48,53,50,	-48,-20,165,55,	-40,40,160,80},
			new int[]{48,-48,53,50,	-24,-30,125,65,	-10,40,150,105}});
		//JUMPING MK
		hitboxArchiver.add(new int[][]{new int[]{37,0,9,0,2},
			new int[]{32,-48,53,50,	-32,-15,155,50,	-10,40,140,105},
			new int[]{48,-48,53,50,	-32,-15,155,50,	-10,40,140,105},
			new int[]{56,-36,53,50,	-32,-30,130,85,	-35,60,150,50,	100,-10,85,50},
			new int[]{56,-36,53,50,	-32,-30,130,85,	-35,60,275,50,	100,-10,85,50},
			new int[]{56,-36,53,50,	-32,-30,130,85,	-35,60,275,50,	100,-10,85,50},
			new int[]{56,-36,53,50,	-32,-30,130,85,	-35,60,275,50,	100,-10,85,50},
			new int[]{56,-36,53,50,	-32,-30,130,85,	-35,60,275,50,	100,-10,85,50},
			new int[]{56,-36,53,50,	-32,-30,130,85,	-35,60,275,50,	100,-10,85,50},
			new int[]{48,-48,53,50,	-48,-20,155,50,	-10,30,190,30,	-30,60,235,95},
			new int[]{48,-56,53,50,	-48,-25,136,70,	-10,45,150,80,	-10,125,103,75}});
		//JUMPING HK
		hitboxArchiver.add(new int[][]{new int[]{38,0,13,0,3},
			new int[]{24,-56,53,50,	-16,-20,155,50,	-20,30,185,100},
			new int[]{0,-56,53,50,	-48,-20,155,75,	-35,60,130,70},
			new int[]{0,-56,53,50,	-24,-20,130,75,	-60,60,350,50,	-15,110,100,40},
			new int[]{0,-56,53,50,	-24,-20,130,75,	-60,60,350,50,	-15,110,100,40},
			new int[]{0,-56,53,50,	-24,-20,130,55,	-60,40,320,55,	-15,100,75,70},
			new int[]{24,-56, 53,50,	-16,-20,155,70,	-20,50,185,120},
			new int[]{24,-56,53,50,	-16,-40,155,95,	-40,60,200,95},
			new int[]{16,-56,53,50,	-16,-40,155,70,	-15,35,155,120},
			new int[]{-8,-56,53,50,	-48,-40,140,110,	-25,70,120,75,	95,-20,135,80},
			new int[]{-8,-56,53,50,	-48,-40,140,110,	-25,70,120,75,	95,20,90,50},
			new int[]{-8,-56,53,50,	-48,-40,140,110,	-25,70,120,75,	95,20,90,50},
			new int[]{16,-56,53,50,	-16,-40,155,70,	-15,35,155,120},
			new int[]{24,-56,53,50,	-16,-40,155,95,	-40,60,200,95},
			new int[]{24,-56,53,50,	-16,-20,155,70,	-20,50,185,120}});
		
		//OVERHEAD MP
		hitboxArchiver.add(new int[][]{new int[]{52,0,8,0,3},
			new int[]{56,-36,53,50,	0,-12,120,55,	0,50,120,70,	-60,130,215,120},
			new int[]{56,-36,53,50,	0,-12,120,55,	0,50,120,70,	-60,130,215,120},
			new int[]{72,-36,53,50,	0,-12,120,55,	0,50,120,70,	-60,130,215,120},
			new int[]{72,-24,53,50,	0,12,120,55,	0,65,120,65,	-75,130,215,120,	100,-15,85,45},
			new int[]{72,-16,53,50,	0,12,140,70,	0,80,120,50,	-75,130,215,120,	140,20,60,90},
			new int[]{72,-16,53,50,	0,12,140,70,	0,80,120,50,	-75,130,215,120,	140,40,50,50,	155,90,50,50},
			new int[]{72,-16,53,50,	0,12,140,70,	0,80,120,50,	-75,130,215,120,	140,40,50,50,	155,90,50,50},
			new int[]{48,-16,53,50,	-10,12,120,55,	-10,75,100,50,	-40,130,175,120,	110,30,85,95},
			new int[]{32,-23,53,50,	-32,0,120,75,	-32,75,125,80,	-45,155,170,95}});
		//GUTPUNCH HP
		hitboxArchiver.add(new int[][]{new int[]{53,0,12,0,3},
			new int[]{40,-30,53,50,	-32,0,160,75,	-20,75,120,80,	-42,155,170,95},
			new int[]{48,-36,53,50,	0,-12,120,60,	0,55,100,65,	-65,130,215,120},
			new int[]{32,-18,53,50,	-32,12,140,50,	-10,65,110,55,	-50,115,200,135},
			new int[]{40,-12,53,50,	-32,24,130,50,	-10,75,100,50,	-55,125,215,125},
			new int[]{56,-12,53,50,	-24,24,135,35,	-45,60,185,65,	-55,125,215,125},
			new int[]{48,-12,53,50,	-40,12,135,50,	0,65,100,60,	-70,125,200,125},
			new int[]{80,-18,53,50,	-40,12,140,50,	0,65,110,60,	-70,125,200,125,	100,30,55,65,	140,75,110,45},
			new int[]{80,-12,53,50,	-40,12,180,50,	25,75,190,45,	-70,140,200,110},
			new int[]{80,-12,53,50,	-40,12,170,50,	25,75,190,45,	-70,140,200,110},
			new int[]{72,-24,53,50,	20,12,90,50,	20,65,160,45,	-10,115,140,135},
			new int[]{56,-30,53,50,	-24,0,160,85,	-10,95,120,50,	-42,155,160,95},
			new int[]{32,-30,53,50,	-48,0,175,85,	-20,95,125,50,	-42,155,160,95},
			new int[]{32,-18,53,50,	-48,0,175,95,	-40,100,140,50,	-60,155,180,95}});
		
		//FIREBALL LAUNCH
		hitboxArchiver.add(new int[][]{new int[]{44,0,9,0,2},
			new int[]{56,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,180,95},
			new int[]{56,0,53,50,	-32,10,125,100,	-32,85,120,65,	-52,135,200,125},
			new int[]{64,15,53,50,	-52,20,165,80,	-22,90,110,50,	-52,135,200,125},
			new int[]{72,15,53,50,	0,30,220,75,	-22,90,110,50,	-52,135,200,125},
			new int[]{72,15,53,50,	0,30,220,75,	-22,90,110,50,	-52,135,200,125},
			new int[]{72,15,53,50,	0,30,220,75,	-22,90,110,50,	-52,135,200,125},
			new int[]{72,15,53,50,	0,30,220,75,	-22,90,110,50,	-52,135,200,125},
			new int[]{72,15,53,50,	0,30,220,75,	-22,90,110,50,	-52,135,200,125},
			new int[]{72,15,53,50,	0,30,220,75,	-22,90,110,50,	-52,135,200,125},
			new int[]{72,15,53,50,	0,30,220,75,	-22,90,110,50,	-52,135,200,125}});
		//FIREBALL RECOVER
		hitboxArchiver.add(new int[][]{new int[]{45,0,2,0,2},
			new int[]{72,15,53,50,	0,30,220,75,	-22,90,110,50,	-52,135,200,125},
			new int[]{64,0,53,50,	0,30,180,75,	-22,90,110,50,	-52,135,200,125},
			new int[]{56,-23,53,50,	0,0,135,75,	-12,80,120,70,	-32,155,160,95}});
		//TATSU START
		hitboxArchiver.add(new int[][]{new int[]{46,0,10,0,2},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	0,55,155,100,	12,155,70,95},
			new int[]{16,-83,53,50,	-32,-40,132,60,	0,20,100,60,	-42,80,160,150},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90,	100,20,100,50},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90,	100,20,100,50},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90,	100,20,100,50},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90,	100,20,100,50},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90}});
		//TATSU SPIN
		hitboxArchiver.add(new int[][]{new int[]{46,3,10,0,2},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90,	100,20,100,50},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90,	100,20,100,50},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90,	100,20,100,50},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90,	100,20,100,50},
			new int[]{16,-83,53,50,	0,-40,132,60,	0,20,100,60,	0,80,100,90}});
		//TATSU RECOVER
		hitboxArchiver.add(new int[][]{new int[]{47,0,3,0,2},
			new int[]{8,-53,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{8,-53,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{16,0,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//DP
		hitboxArchiver.add(new int[][]{new int[]{48,0,7,0,2},
			new int[]{72,0,53,50,	0,25,125,50,	0,85,140,50,	-42,145,185,105},
			new int[]{88,36,53,50,	24,50,100,50,	0,95,140,50,	-42,145,185,105},
			new int[]{88,58,53,50,	24,80,100,50,	0,120,140,70,	-42,145,185,105},
			new int[]{88,42,53,50,	12,50,120,90,	72,95,110,80,	-42,145,185,105},
			new int[]{80,0,53,50,	12,20,120,50,	12,80,120,50,	-42,145,180,105},
			new int[]{0,-80,53,50,	-32,-40,130,80,	0,0,160,125,	0,125,80,125},
			new int[]{0,-80,53,50,	-32,-40,130,80,	0,0,160,125,	0,125,80,125},
			new int[]{0,-80,53,50,	-32,-40,130,80,	0,0,160,125,	0,125,80,125}});
		//DP RECOVER
		hitboxArchiver.add(new int[][]{new int[]{49,0,3,0,2},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95},
			new int[]{32,-23,53,50,	-32,0,150,55,	-32,55,125,100,	-42,155,160,95}});
		//DONKEYKICK
		hitboxArchiver.add(new int[][]{new int[]{50,0,6,0,2},
			new int[]{16,-42,53,50,	-24,-10,150,50,	0,45,90,65,	-42,120,110,130},
			new int[]{16,-42,53,50,	-24,-10,190,50,	5,45,90,65,	12,120,75,130},
			new int[]{16,-42,53,50,	-24,-10,190,50,	5,45,90,65,	12,120,75,130},
			new int[]{-24,-23,53,50,	-42,0,175,65,	0,65,95,115,	42,180,80,70},
			new int[]{-56,-12,53,50,	-72,10,155,90,	-15,80,150,70,	42,150,70,100},
			new int[]{-110,24,53,50,	-72,10,175,100,	32,110,60,140,	100,35,80,70},
			new int[]{-110,24,53,50,	-72,10,175,100,	32,110,60,140,	100,35,80,70,	180,0,100,70}});
		//DONKEYKICK RECOVER
		hitboxArchiver.add(new int[][]{new int[]{51,0,3,0,3},
			new int[]{-96,12,53,50,	-96,20,195,90,	22,110,60,140,	100,65,150,50},
			new int[]{-56,-12,53,50,	-56,0,155,85,	-12,85,110,45,	-20,130,170,120},
			new int[]{-8,-40,53,50,	-32,-10,165,85,	-32,75,125,80,	-32,155,170,95},
			new int[]{24,-23,53,50,	-32,0,155,80,	-42,85,140,70,	-62,160,190,90}});
		
		//BELLA TAUNT
		hitboxArchiver.add(new int[][]{new int[]{55,0,0,0,10},
			new int[]{8,33,53,50,	-112,-15,225,130,	-12,80,100,80,	22,160,115,95},
			new int[]{24,33,53,50,	-72,-15,225,130,	-32,80,120,80,	-52,160,90,95}});
		
		
		movelist.add(new int[][]{{4},{-1},{0},{13,0}});
		movelist.add(new int[][]{{6},{-1},{0},{13,0}});
		movelist.add(new int[][]{{8},{-1},{0},{13,0}});
		movelist.add(new int[][]{{2},{-1},{0},{13,0}});
		movelist.add(new int[][]{{2,3,6,-1},{-1,-1,-1,0},{0,10,10,10}});	//{0,7,4,3}});
		movelist.add(new int[][]{{2,3,6,-1},{-1,-1,-1,1},{0,10,10,10}});
		movelist.add(new int[][]{{2,3,6,-1},{-1,-1,-1,2},{0,10,10,10}});
		movelist.add(new int[][]{{2,1,4,-1},{-1,-1,-1,3},{0,10,10,10}});
		movelist.add(new int[][]{{2,1,4,-1},{-1,-1,-1,4},{0,10,10,10}});
		movelist.add(new int[][]{{2,1,4,-1},{-1,-1,-1,5},{0,10,10,10}});
		movelist.add(new int[][]{{6,2,3,-1},{-1,-1,-1,0},{0,15,10,10}});
		movelist.add(new int[][]{{6,2,3,-1},{-1,-1,-1,1},{0,15,10,10}});
		movelist.add(new int[][]{{6,2,3,-1},{-1,-1,-1,2},{0,15,10,10}});
		movelist.add(new int[][]{{4,2,6,-1},{-1,-1,-1,3},{0,10,10,10}});
		movelist.add(new int[][]{{4,2,6,-1},{-1,-1,-1,4},{0,10,10,10}});
		movelist.add(new int[][]{{4,2,6,-1},{-1,-1,-1,5},{0,10,10,10}});
		movelist.add(new int[][]{{4,1,2,3,6,-1},{-1,-1,-1,-1,-1,3},{0,10,10,10,10,10,10}});
		movelist.add(new int[][]{{4,1,2,3,6,-1},{-1,-1,-1,-1,-1,4},{0,10,10,10,10,10,10}});
		movelist.add(new int[][]{{4,1,2,3,6,-1},{-1,-1,-1,-1,-1,5},{0,10,10,10,10,10,10}});
		movelist.add(new int[][]{{-1,-1,4,-1,-1},{0,1,-1,3,4},{0,15,15,15,15}});
		
		normals = new Action[]{new LightPunch(this), new MediumPunch(this), new HeavyPunch(this), new LightKick(this), new MediumKick(this), new HeavyKick(this)};
		actions = new Action[]{actions[0], actions[1], actions[2], actions[3], actions[4], actions[5], actions[6], actions[7], actions[8], actions[9], actions[10],
				new Taunt(this), new Taunt(this), new Hug(this), new Hug(this), new HugForward(this,false), new HugForward(this,true), new HugUpward(this), new HugDownward(this),
				new FireBall(this,0), new FireBall(this,1), new FireBall(this,2),
				new Tatsu(this,0), new Tatsu(this,1), new Tatsu(this,2),
				new DragonPunch(this,0), new DragonPunch(this,1), new DragonPunch(this,2),
				new DonkeyKick(this,0), new DonkeyKick(this,1), new DonkeyKick(this,2),
				new DonkeyKick(this,0), new DonkeyKick(this,1), new DonkeyKick(this,2), new BellaTaunt(this)};
	}
	
	public void draw(Graphics2D g, ImageObserver i, SpriteReader s, double w, double h, boolean[] d)
	{
		if(spriteIndex == -1)
			spriteIndex = s.addSprite();
		if(spriteIndex != -1 && currState.getPosition() < hitboxArchiver.size())
		{
			try
			{
		//		g.drawString(getClass().getResource("/resources/roo.png")+"",(int)(xHosh*w/1280),(int)((yHosh-100)*h/720));
		//		g.drawString((int)sIndex+" "+hitboxArchiver.get(currState.getPosition())[0][0],(int)(xHosh*w/1280),(int)((yHosh-75)*h/720));
				
				int f = (int)sIndex;
				s.read(g,i,sheet,spriteIndex,xHosh,yHosh,width,800,490,f,hitboxArchiver.get(currState.getPosition())[0][0],xOffset,yOffset,spriteParams,!isFacingRight,sAngle,sTint);
			}
			catch(java.lang.IndexOutOfBoundsException e)
			{
				draw(g,i,s,w,h,d);
			}
		}
		super.draw(g,i,s,w,h,d);
	}
	
	public void checkState()
	{
	//	HITBOX FRAME TEST
	//	bounds.isGrounded = true; floatOverride = false; setAction(new DonkeyKick(this,0));
	//	currState = RooState.DONKEYKICK; sIndex = 5; fCounter = ((int)sIndex-hitboxArchiver.get(currState.getPosition())[0][1])*hitboxArchiver.get(currState.getPosition())[0][4]; currAction.frames = 999;
		
		switch(currState.getState())
		{
			case "FIREBALL_LAUNCH":	
			case "FIREBALL_RECOVER":
			case "TATSU_START":
			case "TATSU_SPIN":
			case "TATSU_RECOVER":
			case "DP":
			case "DP_RECOVER":
			case "DONKEYKICK":
			case "DONKEYKICK_RECOVER":
			case "B_TAUNT":
			case "OVERHEAD_MP":
			case "GUTPUNCH_HP":
				performAction();
				break;
		}
		super.checkState();
	}
	
	
	public class LightPunch extends Action
	{
		Roo roo;
		
		public LightPunch(Roo r)
		{
			super(Action.NORMAL,1,
				new int[][]{new int[]{0,1,2,3,4,5}, new int[]{0,1,2,3,4,5}, new int[]{1,2,4,5}},
				new boolean[]{true,true,true},
				new boolean[]{true,true,true},
				new boolean[]{false,false,true},
				new boolean[]{false,false,true},
				new int[]{3,10,3,10,4,30},	//new int[]{5,10,5,10,7,30},
				new boolean[]{true,true,true});
			roo = r;
			scaling = 0.03;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			if(f >= frames)
			{
				isPerformingAction = false;
				if(target != null)
					isFacingRight = bounds.xCoord+bounds.width/2 <= target.bounds.xCoord+target.bounds.width/2;
				return;
			}
			else
			{
				if(f == 0)
					cLock = isCrouching;
				else
					isCrouching = cLock;
				
				switch(f)
				{
					case 0:
						currState = (!bounds.isGrounded)? PlayerState.JUMPING_LP:((isCrouching)? PlayerState.CROUCHING_LP:PlayerState.STANDING_LP);
						hashCounter = "";
						
						if(!bounds.isGrounded)
						{
							bounds.botOffset = -95;
							frames = 30;
						}
						else if(isCrouching)
							frames = 10;
						else
							frames = 10;
						break;
						
					case 1:
						if(!bounds.isGrounded)
							addGuardTrigger(roo,0,bounds.xCoord+100,bounds.yCoord-10,150,160,29,roo.isFacingRight,true,true);
						else if(isCrouching)
							addGuardTrigger(roo,0,bounds.xCoord+110,bounds.yCoord-10,200,35,4,roo.isFacingRight,true,true);
						else
							addGuardTrigger(roo,0,bounds.xCoord+130,bounds.yCoord+10,180,35,4,roo.isFacingRight,true,true);
						break;
						
					case 2:
						if(!bounds.isGrounded){}
						else if(isCrouching)
							addPleb(roo,0,bounds.xCoord+110,bounds.yCoord+5,125,20,3,Pleb.MID,0,12,1,16,0,0.8,true,false,false,true,new double[][]{});
						else
							addPleb(roo,0,bounds.xCoord+130,bounds.yCoord+25,140,20,3,Pleb.MID,0,12,1,16,0,0.8,true,false,false,true,new double[][]{});
						break;
						
					case 3:
						if(!bounds.isGrounded)
							addPleb(roo,0,bounds.xCoord+120,bounds.yCoord+53,65,30,27,Pleb.HIGH,1,12,1,16,0,0.8,true,false,false,true,new double[][]{});
						else if(isCrouching){}
						else{}
						break;
				}
			}
		}
	}
	
	public class MediumPunch extends Action
	{
		Roo roo;
		
		public MediumPunch(Roo r)
		{
			super(Action.NORMAL,1,
				new int[][]{new int[]{2,5}, new int[]{2,5}, new int[]{2,5}},
				new boolean[]{true,true,true},
				new boolean[]{true,true,true},
				new boolean[]{false,false,true},
				new boolean[]{false,false,true},
				new int[]{6,18,5,14,4,30},	//new int[]{8,18,8,14,9,30},
				new boolean[]{true,true,true});
			roo = r;
			scaling = 0.03;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			if(f >= frames)
			{
				isPerformingAction = false;
				if(target != null)
					isFacingRight = bounds.xCoord+bounds.width/2 <= target.bounds.xCoord+target.bounds.width/2;
				return;
			}
			else
			{
				if(f == 0)
					cLock = isCrouching;
				else
					isCrouching = cLock;
				
				boolean j = false;
				if(target != null)
					j = target.bounds.isGrounded;
				
				switch(f)
				{
					case 0:
						currState = (!bounds.isGrounded)? PlayerState.JUMPING_MP:((isCrouching)? PlayerState.CROUCHING_MP:PlayerState.STANDING_MP);
						hashCounter = "";
						
						if(!bounds.isGrounded)
						{
							bounds.botOffset = -95;
							frames = 30;
						}
						else if(isCrouching)
							frames = 14;
						else
						{
							if(!sInputs[0] && !sInputs[2] && ((isFacingRight)? sInputs[1]:sInputs[3]))
							{
								setAction(new CollarBreaker(roo));
								fCounter = -1;
								sIndex = hitboxArchiver.get(currState.getPosition())[0][1];
								isPerformingAction = true;
							}
							else
							frames = 18;
						}
						break;
						
					case 1:
						if(!bounds.isGrounded)
							addGuardTrigger(roo,0,bounds.xCoord+90,bounds.yCoord-130,175,280,3,roo.isFacingRight,true,true);
						else if(isCrouching)
							addGuardTrigger(roo,0,bounds.xCoord+110,bounds.yCoord-10,200,35,7,roo.isFacingRight,true,true);
						else
							addGuardTrigger(roo,0,bounds.xCoord+130,bounds.yCoord+10,210,35,8,roo.isFacingRight,true,true);
						break;
					
					case 3:
						if(!bounds.isGrounded)
							addPleb(roo,0,bounds.xCoord+110,bounds.yCoord+25,70,75,1,Pleb.HIGH,1,25,10,8,0,0.8,true,false,false,true,new double[][]{});
						else if(isCrouching){}
						else{}
						break;
						
					case 4:
						if(!bounds.isGrounded)
						{
							addGuardTrigger(roo,1,bounds.xCoord+90,bounds.yCoord-130,175,280,8,roo.isFacingRight,true,true);
							if(j)
								addPleb(roo,1,bounds.xCoord+110,bounds.yCoord-85,100,135,2,Pleb.HIGH,1,35,10,2,0,0.8,true,false,false,true,new double[][]{new double[]{Pleb.LAUNCH,1,-2,1,25,1,25}});
							else
								addPleb(roo,1,bounds.xCoord+110,bounds.yCoord-85,100,135,2,Pleb.HIGH,1,10,10,4,-8,0.8,true,false,false,true,new double[][]{});
						}
						else if(isCrouching)
							addPleb(roo,0,bounds.xCoord+110,bounds.yCoord+5,125,20,4,Pleb.MID,1,25,10,16,0,0.8,true,false,false,true,new double[][]{});
						else{}
						break;
						
					case 5:
						if(!bounds.isGrounded)
						{
							if(j)
								addPleb(roo,1,bounds.xCoord+150,bounds.yCoord-70,60,80,6,Pleb.HIGH,1,35,10,2,0,0.8,true,false,false,true,new double[][]{new double[]{Pleb.LAUNCH,1,-2,1,25,1,25}});
							else
								addPleb(roo,1,bounds.xCoord+150,bounds.yCoord-70,60,80,6,Pleb.HIGH,1,10,10,4,-8,0.8,true,false,false,true,new double[][]{});
						}
						else if(isCrouching){}
						else
						{
							addPleb(roo,0,bounds.xCoord+110,bounds.yCoord+30,85,20,1,Pleb.MID,1,30,10,20,0,0.1,true,false,false,true,new double[][]{});
							addPleb(roo,0,bounds.xCoord+200,bounds.yCoord+30,50,30,1,Pleb.MID,1,30,10,20,0,0.1,true,false,false,true,new double[][]{});
						}
						break;
						
					case 6:
						if(!bounds.isGrounded){}
						else if(isCrouching){}
						else
							addPleb(roo,0,bounds.xCoord+125,bounds.yCoord+30,130,20,3,Pleb.MID,1,30,10,20,0,0.1,true,false,false,true,new double[][]{});
						break;
				}
			}
		}
	}
	
	public class HeavyPunch extends Action
	{
		Roo roo;
		
		public HeavyPunch(Roo r)
		{
			super(Action.NORMAL,1,
				new int[][]{new int[]{}, new int[]{}, new int[]{}},
				new boolean[]{true,true,true},
				new boolean[]{true,true,true},
				new boolean[]{false,false,true},
				new boolean[]{false,false,true},
				new int[]{4,28,5,26,10,14},
				new boolean[]{true,true,true});
			roo = r;
			scaling = 0.03;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			if(f >= frames)
			{
				isPerformingAction = false;
				if(target != null)
					isFacingRight = bounds.xCoord+bounds.width/2 <= target.bounds.xCoord+target.bounds.width/2;
				return;
			}
			else
			{
				if(f == 0)
					cLock = isCrouching;
				else
					isCrouching = cLock;
				
				switch(f)
				{
					case 0:
						currState = (!bounds.isGrounded)? PlayerState.JUMPING_HP:((isCrouching)? PlayerState.CROUCHING_HP:PlayerState.STANDING_HP);
						hashCounter = "";
						
						if(!bounds.isGrounded)
						{
							bounds.botOffset = -125;
							frames = 14;
						}
						else if(isCrouching)
							frames = 26;
						else
						{
							if(!sInputs[0] && !sInputs[2] && ((isFacingRight)? sInputs[1]:sInputs[3]))
							{
								setAction(new GutPunch(roo));
								fCounter = -1;
								sIndex = hitboxArchiver.get(currState.getPosition())[0][1];
								isPerformingAction = true;
							}
							else
								frames = 28;
						}
						break;
						
					case 1:
						if(!bounds.isGrounded)
							addGuardTrigger(roo,0,bounds.xCoord+115,bounds.yCoord,225,175,11,roo.isFacingRight,true,true);
						else if(isCrouching)
						{
							addGuardTrigger(roo,0,bounds.xCoord+70,bounds.yCoord-185,160,335,10,roo.isFacingRight,true,true);
							addGuardTrigger(roo,0,bounds.xCoord+70,bounds.yCoord-310,80,250,10,roo.isFacingRight,true,true);
							addGuardTrigger(roo,0,bounds.xCoord+110,bounds.yCoord-250,80,250,10,roo.isFacingRight,true,true);
						}
						else
						{
							addGuardTrigger(roo,0,bounds.xCoord+130,bounds.yCoord+6,165,135,9,roo.isFacingRight,true,true);
							addGuardTrigger(roo,0,bounds.xCoord+150,bounds.yCoord-150,80,195,9,roo.isFacingRight,true,true);
						}
						break;
						
					case 3:
						if(!bounds.isGrounded){}
						else if(isCrouching){}
						else
						{
							addPleb(roo,0,bounds.xCoord+138,bounds.yCoord+62,72,52,4,Pleb.MID,2,45,25,18,0,0.75,true,false,false,true,new double[][]{});
							addPleb(roo,0,bounds.xCoord+142,bounds.yCoord+6,82,62,4,Pleb.MID,2,45,25,18,0,0.75,true,false,false,true,new double[][]{});
						}
						break;
						
					case 4:
						if(!bounds.isGrounded)
						{
							addPleb(roo,0,bounds.xCoord+160,bounds.yCoord+30,50,40,8,Pleb.HIGH,2,50,25,18,0,0.75,true,false,false,true,new double[][]{});
							addPleb(roo,0,bounds.xCoord+200,bounds.yCoord+60,50,40,8,Pleb.HIGH,2,50,25,18,0,0.75,true,false,false,true,new double[][]{});
						}
						else if(isCrouching)
						{
							addPleb(roo,0,bounds.xCoord+102,bounds.yCoord-35,95,70,2,Pleb.MID,2,60,25,18,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.LAUNCH,1,-2,-35,35,1,45}});
							addPleb(roo,0,bounds.xCoord+90,bounds.yCoord+35,70,60,2,Pleb.MID,2,60,25,18,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.LAUNCH,1,-2,-35,35,1,45}});
						}
						else{}
						break;
						
					case 5:
						if(!bounds.isGrounded){}
						else if(isCrouching)
						{
							addPleb(roo,0,bounds.xCoord+103,bounds.yCoord-25,97,87,1,Pleb.MID,2,60,25,18,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.LAUNCH,1,-2,-35,35,1,45}});
							addPleb(roo,0,bounds.xCoord+80,bounds.yCoord+45,87,72,1,Pleb.MID,2,60,25,18,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.LAUNCH,1,-2,-35,35,1,45}});
						}
						else
						{
							addPleb(roo,0,bounds.xCoord+148,bounds.yCoord-38,55,40,4,Pleb.MID,2,45,25,18,0,0.75,true,false,false,true,new double[][]{});
							addPleb(roo,0,bounds.xCoord+123,bounds.yCoord-73,55,40,4,Pleb.MID,2,45,25,18,0,0.75,true,false,false,true,new double[][]{});
						}
						break;
						
					case 6:
						if(!bounds.isGrounded){}
						else if(isCrouching)
						{
							addPleb(roo,0,bounds.xCoord+88,bounds.yCoord-180,45,90,2,Pleb.MID,2,60,25,18,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.LAUNCH,1,-2,-35,35,1,45}});
							addPleb(roo,0,bounds.xCoord+118,bounds.yCoord-105,45,90,2,Pleb.MID,2,60,25,18,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.LAUNCH,1,-2,-35,35,1,45}});
						}
						else{}
						break;
						
					case 8:
						if(!bounds.isGrounded){}
						else if(isCrouching)
							addPleb(roo,0,bounds.xCoord+78,bounds.yCoord-175,40,50,2,Pleb.MID,2,60,25,18,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.LAUNCH,1,-2,-35,35,1,45}});
						else{}
						break;
				}
			}
		}
	}
	
	public class LightKick extends Action
	{
		Roo roo;
		
		public LightKick(Roo r)
		{
			super(Action.NORMAL,1,
				new int[][]{new int[]{0,1,2,3,4,5}, new int[]{0,1,2,3,4,5}, new int[]{0,1,2,3,4,5}},
				new boolean[]{true,true,true},
				new boolean[]{true,true,true},
				new boolean[]{false,false,true},
				new boolean[]{false,false,true},
				new int[]{5,15,5,14,5,30},
				new boolean[]{true,true,true});
			roo = r;
			scaling = 0.03;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			if(f >= frames)
			{
				isPerformingAction = false;
				if(target != null)
					isFacingRight = bounds.xCoord+bounds.width/2 <= target.bounds.xCoord+target.bounds.width/2;
				return;
			}
			else
			{
				if(f == 0)
					cLock = isCrouching;
				else
					isCrouching = cLock;
				
				switch(f)
				{
					case 0:
						currState = (!bounds.isGrounded)? PlayerState.JUMPING_LK:((isCrouching)? PlayerState.CROUCHING_LK:PlayerState.STANDING_LK);
						hashCounter = "";
						
						if(!bounds.isGrounded)
						{
							bounds.botOffset = -115;
							frames = 30;
						}
						else if(isCrouching)
							frames = 14;
						else
							frames = 15;
						break;
						
					case 1:
						if(!bounds.isGrounded)
							addGuardTrigger(roo,0,bounds.xCoord+80,bounds.yCoord+60,150,160,12,roo.isFacingRight,true,true);
						else if(isCrouching)
							addGuardTrigger(roo,0,bounds.xCoord+130,bounds.yCoord+85,175,65,6,roo.isFacingRight,true,true);
						else
							addGuardTrigger(roo,0,bounds.xCoord+130,bounds.yCoord+165,195,75,6,roo.isFacingRight,true,true);
						break;
						
					case 4:
						if(!bounds.isGrounded)
							addPleb(roo,0,bounds.xCoord+100,bounds.yCoord+110,70,40,2,Pleb.HIGH,0,18,1,17,0,0.8,true,false,false,true,new double[][]{});
						else if(isCrouching)
							addPleb(roo,0,bounds.xCoord+130,bounds.yCoord+125,132,25,3,Pleb.LOW,0,18,1,17,0,0.8,true,false,false,true,new double[][]{});
						else
							addPleb(roo,0,bounds.xCoord+130,bounds.yCoord+185,118,35,3,Pleb.MID,0,18,1,17,0,0.8,true,false,false,true,new double[][]{});
						break;
						
					case 5:
						if(!bounds.isGrounded)
							addPleb(roo,0,bounds.xCoord+100,bounds.yCoord+110,45,30,8,Pleb.HIGH,0,18,1,17,0,0.8,true,false,false,true,new double[][]{});
						else if(isCrouching){}
						else{}
						break;
				}
			}
		}
	}
	
	public class MediumKick extends Action
	{
		Roo roo;
		
		public MediumKick(Roo r)
		{
			super(Action.NORMAL,1,
				new int[][]{new int[]{2,5}, new int[]{2,5}, new int[]{2,5}},
				new boolean[]{true,true,true},
				new boolean[]{true,true,true},
				new boolean[]{false,false,true},
				new boolean[]{false,false,true},
				new int[]{6,20,6,22,6,20},
				new boolean[]{true,true,true});
			roo = r;
			scaling = 0.03;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			if(f >= frames)
			{
				isPerformingAction = false;
				if(target != null)
					isFacingRight = bounds.xCoord+bounds.width/2 <= target.bounds.xCoord+target.bounds.width/2;
				return;
			}
			else
			{
				if(f == 0)
					cLock = isCrouching;
				else
					isCrouching = cLock;
				
				switch(f)
				{
					case 0:
						currState = (!bounds.isGrounded)? PlayerState.JUMPING_MK:((isCrouching)? PlayerState.CROUCHING_MK:PlayerState.STANDING_MK);
						hashCounter = "";
						
						if(!bounds.isGrounded)
						{
							bounds.botOffset = -135;
							frames = 20;
						}
						else if(isCrouching)
							frames = 22;
						else
							frames = 20;
						break;
						
					case 1:
						if(!bounds.isGrounded)
							addGuardTrigger(roo,0,bounds.xCoord-50,bounds.yCoord+30,350,200,15,roo.isFacingRight,true,true);
						else if(isCrouching)
							addGuardTrigger(roo,0,bounds.xCoord+130,bounds.yCoord+60,215,95,6,roo.isFacingRight,true,true);
						else
							addGuardTrigger(roo,0,bounds.xCoord+153,bounds.yCoord+10,168,135,9,roo.isFacingRight,true,true);
						break;
						
					case 2:
						if(!bounds.isGrounded){}
						else if(isCrouching)
							bounds.forceArchiver.add(new Force("mkStep",(isFacingRight)? 3:1,7,7));
						else
							bounds.forceArchiver.add(new Force("mkStep",(isFacingRight)? 3:1,15,15));
						break;
						
					case 5:
						if(!bounds.isGrounded)
						{
							addPleb(roo,0,bounds.xCoord+230,bounds.yCoord+70,40,50,1,Pleb.HIGH,1,24,10,17,0,0.8,true,false,false,true,new double[][]{});
							addPleb(roo,0,bounds.xCoord+140,bounds.yCoord+95,100,35,1,Pleb.HIGH,1,24,10,17,0,0.8,true,false,false,true,new double[][]{});
							addPleb(roo,0,bounds.xCoord,bounds.yCoord+100,160,35,11,Pleb.HIGH,1,24,10,17,0,0.8,true,false,false,true,new double[][]{});
						}
						else if(isCrouching)
							addPleb(roo,0,bounds.xCoord+130,bounds.yCoord+120,148,30,3,Pleb.LOW,1,26,10,17,0,0.8,true,false,false,true,new double[][]{});
						else
						{
							addPleb(roo,0,bounds.xCoord+176,bounds.yCoord+50,55,40,4,Pleb.MID,1,22,10,19,0,0.75,true,false,false,true,new double[][]{});
							addPleb(roo,0,bounds.xCoord+153,bounds.yCoord+90,55,40,4,Pleb.MID,1,22,10,19,0,0.75,true,false,false,true,new double[][]{});
						}
						break;
						
					case 6:
						if(!bounds.isGrounded)
							addPleb(roo,0,bounds.xCoord+140,bounds.yCoord+80,125,35,10,Pleb.HIGH,1,24,10,17,0,0.8,true,false,false,true,new double[][]{});
						else if(isCrouching){}
						else{}
						break;
				}
			}
		}
	}
	
	public class HeavyKick extends Action
	{
		Roo roo;
		
		public HeavyKick(Roo r)
		{
			super(Action.NORMAL,1,
				new int[][]{new int[]{}, new int[]{}, new int[]{2}},
				new boolean[]{true,false,true},
				new boolean[]{false,false,true},
				new boolean[]{false,false,true},
				new boolean[]{false,false,true},
				new int[]{9,26,-1,-1,5,38},
				new boolean[]{true,true,true});
			roo = r;
			scaling = 0.03;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			if(f >= frames)
			{
				isPerformingAction = false;
				if(target != null)
					isFacingRight = bounds.xCoord+bounds.width/2 <= target.bounds.xCoord+target.bounds.width/2;
				return;
			}
			else
			{
				if(f == 0)
					cLock = isCrouching;
				else
					isCrouching = cLock;
				
				switch(f)
				{
					case 0:
						currState = (!bounds.isGrounded)? PlayerState.JUMPING_HK:((isCrouching)? PlayerState.CROUCHING_HK:PlayerState.STANDING_HK);
						hashCounter = "";
						
						if(!bounds.isGrounded)
						{
							bounds.botOffset = -135;
							frames = 38;
						}
						else if(isCrouching)
							frames = 34;
						else
							frames = 26;
						break;
						
					case 1:
						if(!bounds.isGrounded)
							addGuardTrigger(roo,0,bounds.xCoord+75,bounds.yCoord+10,320,180,14,roo.isFacingRight,true,true);
						else if(isCrouching)
							addGuardTrigger(roo,0,bounds.xCoord+145,bounds.yCoord+60,215,95,6,roo.isFacingRight,true,true);
						else
						{
							addGuardTrigger(roo,0,bounds.xCoord+125,bounds.yCoord-130,130,210,13,roo.isFacingRight,true,true);
							addGuardTrigger(roo,0,bounds.xCoord+125,bounds.yCoord-50,210,150,13,roo.isFacingRight,true,true);
						}
						break;
						
					case 4:
						if(!bounds.isGrounded)
						{
							addPleb(roo,0,bounds.xCoord+260,bounds.yCoord+60,50,50,2,Pleb.HIGH,2,24,25,4,-40,0.45,true,false,false,true,new double[][]{});
							addPleb(roo,0,bounds.xCoord+100,bounds.yCoord+70,160,35,11,Pleb.HIGH,2,24,25,4,-40,0.45,true,false,false,true,new double[][]{});
						}
						else if(isCrouching)
							bounds.forceArchiver.add(new Force("hkStep",(isFacingRight)? 3:1,12,6));
						else{}
						break;
						
					case 7:
						if(!bounds.isGrounded){}
						else if(isCrouching)
							addPleb(roo,0,bounds.xCoord+130,bounds.yCoord+115,152,35,5,Pleb.LOW,1,65,25,22,0,0.8,true,false,false,true,new double[][]{new double[]{Pleb.KNOCKDOWN,0,1,35,7,60}});
						else{}
						break;	
					
					case 8:
						if(!bounds.isGrounded){}
						else if(isCrouching){}
						else
						{
							addPleb(roo,0,bounds.xCoord+140,bounds.yCoord+10,60,40,5,Pleb.MID,2,49,25,24,0,0.45,true,false,false,true,new double[][]{});
							addPleb(roo,0,bounds.xCoord+160,bounds.yCoord-20,60,40,5,Pleb.MID,2,49,25,24,0,0.45,true,false,false,true,new double[][]{});
							addPleb(roo,0,bounds.xCoord+180,bounds.yCoord-50,60,40,5,Pleb.MID,2,49,25,24,0,0.45,true,false,false,true,new double[][]{});
						}
						break;
						
					case 15:
						if(!bounds.isGrounded)
							addGuardTrigger(roo,1,bounds.xCoord+75,bounds.yCoord-110,295,210,18,roo.isFacingRight,true,true);
						else if(isCrouching){}
						else{}
						break;
						
					case 18:
						if(!bounds.isGrounded){}
						else if(isCrouching)
							bounds.forceArchiver.add(new Force("hkStep",(isFacingRight)? 1:3,12,6));
						else{}
						break;
						
					case 26:
						if(!bounds.isGrounded)
						{
							addPleb(roo,1,bounds.xCoord+195,bounds.yCoord-25,70,50,12,Pleb.HIGH,2,32,25,20,0,0.45,true,false,false,true,new double[][]{});
							addPleb(roo,1,bounds.xCoord+150,bounds.yCoord-10,60,60,2,Pleb.HIGH,2,32,25,20,0,0.45,true,false,false,true,new double[][]{});
							addPleb(roo,1,bounds.xCoord+100,bounds.yCoord+15,60,60,2,Pleb.HIGH,2,32,25,20,0,0.45,true,false,false,true,new double[][]{});
						}
						else if(isCrouching){}
						else{}
						break;
				}
			}
		}
	}
	
	public class Hug extends Player.Hug
	{
		Roo roo;
		int hCounter, lastMashed;
		
		public Hug(Roo r)
		{
			super(8);
			roo = r;
			
			hCounter = -1;
			lastMashed = -1;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			isCrouching = false;
			
			if(f >= frames)
			{
				if(target != null)
				{
					if(currState != PlayerState.HUG_FORWARD && currState != PlayerState.HUG_UPWARD && currState != PlayerState.HUG_DOWNWARD)
					{
						currState = PuppetState.HUG_BREAK;
						sIndex = hitboxArchiver.get(currState.getPosition())[0][1];
						hitStun = 15;
						isTeching = true;
						
						target.currState = PuppetState.HUG_BREAK;
						target.sIndex = target.hitboxArchiver.get(target.currState.getPosition())[0][1];
						target.hitStun = 15;
						target.isTeching = true;
					}
					
					target.xOffset = 0;
					target.yOffset = 0;
					target.sAngle = 0;
					target.isThrown = false;
				}
				else
					isPerformingAction = false;
				
				xOffset = 0;
				yOffset = 0;
				sAngle = 0;
				isThrowing = false;
				
				if(target != null)
					isFacingRight = bounds.xCoord+bounds.width/2 <= target.bounds.xCoord+target.bounds.width/2;
				hCounter = -1;
				lastMashed = -1;
				return;
			}
			else
			{
				if(bounds.isGrounded)
				{
					bounds.yCoord = yCoord;
					bounds.height = height;
				}
				isThrowing = true;
				
				if(target == null)
				{	
					switch(f)
					{
						case 0:
							currState = PlayerState.HUG_START;
							frames = 24;
							cancelOk = false;
							
			/*				if(!bounds.isGrounded)
								bounds.botOffset = -1;
							break;*/
							
						case 3:
							addGrab(roo,bounds.xCoord+100,bounds.yCoord+15,150,235,3,roo.isFacingRight,true,true);
							break;
					}
				}
				else
				{	
					cancelOk = true;
					if(hCounter < 0)
					{
						currState = PlayerState.HUG_HOLD;
						frames = 120;
						
						if(f == 0)
						{
							tCounter = 0;
							lastMashed = -1;
							button = -1;
						}
						
						if(f >= 10 && lastMashed != button)
						{
							hCounter = 0;
							lastMashed = button;
						}
						
						if(target.hitStun == 0 && target.isThrown)
						{
							target.currState = PuppetState.HUGGED1;
							target.sIndex = target.hitboxArchiver.get(target.currState.getPosition())[0][1];
							target.yOffset = -25;
						}
						
						if((!isFacingRight && bounds.xCoord-(target.bounds.xCoord+target.bounds.width-50) < 50) || (isFacingRight && target.bounds.xCoord-(bounds.xCoord+bounds.width+50) > 50))
							target.bounds.forceArchiver.add(new Force("Hug",(isFacingRight)? 1:3,50,50));
						else
							target.bounds.xCoord = (isFacingRight)? bounds.xCoord+bounds.width+50:bounds.xCoord-target.bounds.width-50;
						target.bounds.yCoord = bounds.yCoord+bounds.height-target.bounds.height;
					}
					else if(bounds.isGrounded && f >= 10)
					{
						switch(hCounter)
						{
							case 0:
								currState = PlayerState.HUG_HIT;
								break;
								
							case 2:
								addPleb(roo,f,bounds.xCoord+100,bounds.yCoord+40,150,210,5,Pleb.MID,0,10,0,0,0,0.75,true,false,false,true,new double[][]{});
								break;
							
							case 9:
								hCounter = -1;
								lastMashed = -1;
								button = -1;
								break;
						}
						
						if(hCounter >= 0)
							hCounter++;
					}
					
					if(!bounds.isGrounded && tCounter == techWindow)
					{
						bounds.forceArchiver.clear();
						target.bounds.forceArchiver.clear();
						
						Puppet t = target;
						setAction(actions[18]);
						currAction.target = t;
						fCounter = -1;
						sIndex = hitboxArchiver.get(currState.getPosition())[0][1];
					}
				}
			}
			super.perform(f);
		}
	}
	
	public class HugForward extends Action
	{
		Roo roo;
		boolean hRight;
		
		public HugForward(Roo r, boolean d)
		{
			super(Action.GRAB,2,
					new int[][]{new int[]{}, new int[]{}, new int[]{}},
					new boolean[]{false,false,false},
					new boolean[]{false,false,false},
					new boolean[]{false,false,false},
					new boolean[]{false,false,false},
					new int[]{-1,-1,-1,-1,-1,-1},
					new boolean[]{true,false,true});
				roo = r;
				hRight = d;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			isCrouching = false;
			
			if(f >= frames)
			{
				xOffset = 0;
				yOffset = 0;
				sAngle = 0;
				isThrowing = false;
				
				target.xOffset = 0;
				target.yOffset = 0;
				target.sAngle = 0;
				target.isThrown = false;
				
				isPerformingAction = false;
				return;
			}
			else
			{
				isThrowing = true;
				switch(f)
				{
					case 0:
						currState = PlayerState.HUG_FORWARD;
						frames = 26;
						isFacingRight = isFacingRight ^ !hRight;
						break;
						
					case 2:
						target.currState = PuppetState.HUGGED3;
						target.isFacingRight = !isFacingRight;
						target.bounds.forceArchiver.clear();
						target.directTo(bounds.xCoord+bounds.width/2-target.bounds.width/2+((isFacingRight)? -1:1)*(bounds.width/3+target.bounds.width/2),bounds.yCoord-bounds.height/5);
						target.sAngle = 210;
						break;
						
					case 4:
						target.directTo(bounds.xCoord+bounds.width/2-target.bounds.width/2+((isFacingRight)? -1:1)*(bounds.width*2/3+target.bounds.width/2),bounds.yCoord-bounds.height/5-10);
						target.sAngle = 195;
						break;
						
					case 6:
						target.directTo(bounds.xCoord+bounds.width/2-target.bounds.width/2+((isFacingRight)? -1:1)*(bounds.width*2/3+target.bounds.width/2+20),bounds.yCoord-bounds.height/5);
						break;
						
					case 8:
						target.directTo(bounds.xCoord+bounds.width/2-target.bounds.width/2+((isFacingRight)? -1:1)*(bounds.width*2/3+target.bounds.width/2+20),bounds.yCoord-bounds.height/5+10);
						break;
						
					case 10:
						target.directTo(bounds.xCoord+bounds.width/2-target.bounds.width/2+((isFacingRight)? -1:1)*(bounds.width*2/5+target.bounds.width/2),bounds.yCoord-bounds.height*2/3);
						target.sAngle = 90;
						break;
						
					case 12:
						target.directTo(bounds.xCoord+bounds.width/2-target.bounds.width/2+((isFacingRight)? 1:-1)*(bounds.width/2+target.bounds.width/2),bounds.yCoord-bounds.height/5);
						target.sAngle = 0;
						break;
						
					case 15:
						addPleb(roo,0,bounds.xCoord+100,bounds.yCoord+40,150,210,1,Pleb.MID,0,200,0,20,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.KNOCKDOWN,0,1,80,4,60}});
						break;
						
					case 16:
						target.bounds.xCoord = (isFacingRight)? bounds.xCoord+bounds.width:bounds.xCoord-target.bounds.width;
						target.xOffset = 0;
						target.yOffset = 0;
						break;
				}
			}
		}
	}
	
	public class HugUpward extends Action
	{
		Roo roo;
		
		public HugUpward(Roo r)
		{
			super(Action.GRAB,2,
					new int[][]{new int[]{}, new int[]{}, new int[]{}},
					new boolean[]{false,false,false},
					new boolean[]{false,false,false},
					new boolean[]{false,false,false},
					new boolean[]{false,false,false},
					new int[]{-1,-1,-1,-1,-1,-1},
					new boolean[]{true,false,true});
				roo = r;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			isCrouching = false;
			
			if(f >= frames)
			{
				xOffset = 0;
				yOffset = 0;
				sAngle = 0;
				isThrowing = false;
				
				target.xOffset = 0;
				target.yOffset = 0;
				target.sAngle = 0;
				target.isThrown = false;
				
				isPerformingAction = false;
				return;
			}
			else
			{
				isThrowing = true;
				switch(f)
				{
					case 0:
						currState = PlayerState.HUG_UPWARD;
						frames = 25;
						break;
						
					case 3:
						directTo(bounds.xCoord,bounds.yCoord-20);
						sAngle = 345;
						break;
						
					case 6:
						directTo(bounds.xCoord+((isFacingRight)? 1:-1)*bounds.width/2,bounds.yCoord-20);
						sAngle = 270;
						addPleb(roo,0,bounds.xCoord+((isFacingRight)? bounds.width:target.bounds.width),bounds.yCoord,target.bounds.width,target.bounds.height,1,Pleb.MID,1,25,0,0,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.LAUNCH,1,4,-50,50,2,30}});
						break;
				}
				
				if(f > 10 && sInputs[0] && ((isFacingRight && !sInputs[3]) || (!isFacingRight && !sInputs[1])))
				{
					Puppet t = target;
					setAction(actions[7]);
					currAction.target = t;
					fCounter = -1;
					sIndex = hitboxArchiver.get(currState.getPosition())[0][1];
				}
			}
		}
	}
	
	public class HugDownward extends Action
	{
		Roo roo;
		
		public HugDownward(Roo r)
		{
			super(Action.GRAB,2,
					new int[][]{new int[]{}, new int[]{}, new int[]{}},
					new boolean[]{false,false,false},
					new boolean[]{false,false,false},
					new boolean[]{false,false,false},
					new boolean[]{false,false,false},
					new int[]{-1,-1,-1,-1,-1,-1},
					new boolean[]{true,true,true});
				roo = r;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			isCrouching = false;
			
			if(f >= frames)
			{
				xOffset = 0;
				yOffset = 0;
				sAngle = 0;
				isThrowing = false;
				floatOverride = false;
				
				target.xOffset = 0;
				target.yOffset = 0;
				target.sAngle = 0;
				target.isThrown = false;
				target.floatOverride = false;
				
				isPerformingAction = false;
				return;
			}
			else
			{
				isThrowing = true;
				switch(f)
				{
					case 0:
						currState = PlayerState.HUG_DOWNWARD;
						frames = 18;
						isFacingRight = !isFacingRight;
						break;
						
					case 3:
						target.currState = PuppetState.HUGGED2;
						target.bounds.forceArchiver.clear();
						target.floatOverride = true;
						target.directTo(bounds.xCoord+bounds.width/2+((isFacingRight)? -1:1)*(target.bounds.width/2),bounds.yCoord-bounds.height/3);
						target.sAngle = 45;
						
						floatOverride = true;
						directTo(bounds.xCoord+bounds.width/2+((isFacingRight)? -1:1)*target.bounds.width/2,bounds.yCoord-20);
						sAngle = 45;
						break;
						
					case 6:
						target.directTo(bounds.xCoord+bounds.width/2+((isFacingRight)? -1:1)*target.bounds.width/2,bounds.yCoord-bounds.height/3);
						target.sAngle = 120;
						
						directTo(bounds.xCoord+bounds.width/2+((isFacingRight)? -1:1)*target.bounds.width/2,bounds.yCoord-85);
						sAngle = 95;
						break;
						
					case 9:
						target.directTo(bounds.xCoord+bounds.width/2+((isFacingRight)? -1:1)*target.bounds.width/2,bounds.yCoord+bounds.height/3);
						target.sAngle = 225;
						
						directTo(bounds.xCoord+bounds.width/2+((isFacingRight)? -1:1)*target.bounds.width/2,bounds.yCoord-120);
						sAngle = 145;
						break;
						
					case 12:
						bounds.xCoord += bounds.width*((isFacingRight)? -1:1);
						bounds.yCoord -= target.bounds.height+10;
						if(bounds.isGrounded)
							bounds.forceArchiver.add(new Force("hug",2,45,2));
						xOffset = 0;
						yOffset = 0;
						
						target.bounds.xCoord = bounds.xCoord+bounds.width/2+((isFacingRight)? bounds.width:-bounds.width);
						target.bounds.yCoord = bounds.yCoord+bounds.height+10;
						target.bounds.isGrounded = false;
						target.xOffset = 0;
						target.yOffset = 0;
						target.kdStun = 60;
						addPleb(roo,0,bounds.xCoord,bounds.yCoord+bounds.height+10,bounds.width+target.bounds.width,target.bounds.height,1,Pleb.MID,1,140,0,0,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.SPIKE,40,0,20}});
						break;
				}
			}
		}
	}
	
	public class CollarBreaker extends Action
	{
		Roo roo;
		
		public CollarBreaker(Roo r)
		{
			super(Action.NORMAL,1,
				new int[][]{new int[]{2,5}, new int[]{2,5}, new int[]{2,5}},
				new boolean[]{true,true,true},
				new boolean[]{true,true,true},
				new boolean[]{false,false,true},
				new boolean[]{false,false,true},
				new int[]{13,26,-1,-1,-1,-1},
				new boolean[]{true,false,false});;
			roo = r;
			scaling = 0.03;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			isCrouching = false;
			
			if(f >= frames)
			{
				isPerformingAction = false;
				if(target != null)
					isFacingRight = bounds.xCoord+bounds.width/2 <= target.bounds.xCoord+target.bounds.width/2;
				return;
			}
			else
			{
				switch(f)
				{
					case 0:
						currState = RooState.OVERHEAD_MP;
						hashCounter = "";
						frames = 26;
						break;
						
					case 1:
						addGuardTrigger(roo,0,bounds.xCoord+125,bounds.yCoord-15,175,270,12,roo.isFacingRight,true,true);
						break;
						
					case 9:
						addPleb(roo,0,bounds.xCoord+145,bounds.yCoord+15,65,65,3,Pleb.HIGH,2,20,25,10,0,0.75,true,false,false,true,new double[][]{});
						break;
						
					case 12:
						addGuardTrigger(roo,1,bounds.xCoord+125,bounds.yCoord-15,175,270,9,roo.isFacingRight,true,true);
						addPleb(roo,1,bounds.xCoord+165,bounds.yCoord+65,65,100,9,Pleb.HIGH,2,25,25,12,0,0.75,true,false,false,true,new double[][]{});
						break;
				}
			}
		}
	}
	
	public class GutPunch extends Action
	{
		Roo roo;
		
		public GutPunch(Roo r)
		{
			super(Action.NORMAL,2,
				new int[][]{new int[]{}, new int[]{}, new int[]{}},
				new boolean[]{true,true,true},
				new boolean[]{true,true,true},
				new boolean[]{false,false,true},
				new boolean[]{false,false,true},
				new int[]{19,40,-1,-1,-1,-1},
				new boolean[]{true,false,false});
			roo = r;
			scaling = 0.03;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			isCrouching = false;
			
			if(f >= frames)
			{
				isPerformingAction = false;
				if(target != null)
					isFacingRight = bounds.xCoord+bounds.width/2 <= target.bounds.xCoord+target.bounds.width/2;
				return;
			}
			else
			{
				switch(f)
				{
					case 0:
						currState = RooState.GUTPUNCH_HP;
						hashCounter = "";
						frames = 40;
						break;
						
					case 1:
						addGuardTrigger(roo,0,bounds.xCoord+100,bounds.yCoord+30,250,130,18,roo.isFacingRight,true,true);
						break;
						
					case 15:
						addPleb(roo,0,bounds.xCoord+105,bounds.yCoord+65,75,60,3,Pleb.MID,2,25,15,10,0,0.75,true,false,false,true,new double[][]{});
						break;
						
					case 16:
						bounds.forceArchiver.add(new Force("gutPunch",(isFacingRight)? 3:1,6,-5));
						break;
						
					case 18:
						addGuardTrigger(roo,1,bounds.xCoord+100,bounds.yCoord+30,250,130,3,roo.isFacingRight,true,true);
						addPleb(roo,1,bounds.xCoord+125,bounds.yCoord+55,100,80,3,Pleb.MID,2,35,20,10,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.WALLBOUNCE,0,10,3,0,0,10,4}});
						break;
				}
			}
		}
	}
	
	public class FireBall extends Action
	{
		Roo roo;
		int strength, charge, cCounter;
		
		public FireBall(Roo r, int s)
		{
			super(Action.SPECIAL,1,
				new int[][]{new int[]{}, new int[]{}, new int[]{}},
				new boolean[]{false,false,false},
				new boolean[]{true,true,true},
				new boolean[]{false,false,false},
				new boolean[]{false,false,false},
				new int[]{-1,-1,-1,-1,-1,-1},
				new boolean[]{true,false,false});
			roo = r;
			strength = s;
			charge = 0;
			cCounter = 0;
			scaling = 0.08;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			isCrouching = false;
			bounds.yCoord = yCoord;
			bounds.height = height;
			
			if(f >= frames)
			{
				isPerformingAction = false;
				return;
			}
			else
			{
				if(f == 0)
				{
					charge = 0;
					cCounter = 0;
				}
				if(sIndex == 2+(hitboxArchiver.get(currState.getPosition())[0][4]-1.0)/hitboxArchiver.get(currState.getPosition())[0][4] && cCounter < charge)
				{
					sIndex -= 1.0/hitboxArchiver.get(currState.getPosition())[0][4];
					cCounter++;
				}
				
				switch(f-charge)
				{
					case 0:
						if(bounds.isGrounded)
						{
							currState = RooState.FIREBALL_LAUNCH;
							hashCounter = "";
							charge = (strength == 2)? 25:0;
							frames = 38+charge;
						}
						else
							frames = 1;
						break;
						
					case 9:
						propArchiver.add(new Ninja(roo,bounds.xCoord+((isFacingRight)? bounds.width+105:-105),bounds.yCoord+42,120,50,360,1,strength));
						addSound("ninja_breh.wav",new float[]{0.0f});
						break;
					
					case 29:
						currState = RooState.FIREBALL_RECOVER;
				 		sIndex = 0;
						break;
				}
			}
		}
	}
	
	public class Tatsu extends Action
	{
		Roo roo;
		int strength, spins, speed, maxSpeed;
		
		public Tatsu(Roo r, int s)
		{
			super(Action.SPECIAL,1,
				new int[][]{new int[]{}, new int[]{}, new int[]{}},
				new boolean[]{false,false,false},
				new boolean[]{true,true,true},
				new boolean[]{false,false,false},
				new boolean[]{false,false,false},
				new int[]{-1,-1,-1,-1,-1,-1},
				new boolean[]{true,true,false});
			roo = r;
			strength = s;
			spins = 1;
			scaling = 0.1;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			isCrouching = false;
			bounds.yCoord = yCoord;
			bounds.height = height;
			
			if(f >= frames)
			{
				isPerformingAction = false;
				floatOverride = false;
				return;
			}
			else
			{
				if(f < 22+14*(spins-1))
				{
					if(f == 0)
					{
						currState = RooState.TATSU_START;
						hashCounter = "";
						spins = (strength < 2)? ((strength == 0)? 1:3):5;
						speed = 8;
						maxSpeed = (strength < 2)? ((strength == 0)? 8:12):20;
						
						frames = 30+14*(spins-1);
						jDirections[0] = 0;
					}
					else
					{
						boolean g = true;
						switch((f-6)%14)
						{
							case 0:
								currState = RooState.TATSU_SPIN;
								sIndex = 3;
								speed += (strength < 2)? ((strength == 0)? 0:3):3;
								if(speed > maxSpeed)
									speed = maxSpeed;
								
								addGuardTrigger(roo,f,bounds.xCoord+60,bounds.yCoord-10,290,180,14,roo.isFacingRight,true,true);
								break;
							
							case 4:
								if(target != null)
									g = (strength != 1 || target.hitStun != 0);
								addPleb(roo,f,bounds.xCoord+150,bounds.yCoord+35,130,60,4,Pleb.MID,1,18,18,(g)?speed*2:0,0,0.1,true,false,(strength == 2),true,new double[][]{});
								
								if(target != null)
								{
									if(target.hitStun == 0)
										target = null;
								}
								break;
								
							case 10:
								if(target != null)
									g = (strength != 1 || target.hitStun != 0);
								addPleb(roo,f,bounds.xCoord+150,bounds.yCoord+35,130,60,4,Pleb.MID,1,18,18,(g)?speed*2:0,0,0.1,true,false,(strength == 2),true,new double[][]{});
								
								if(target != null)
								{
									if(target.hitStun == 0)
										target = null;
								}
								break;
						}
					}
					
					if(f > 3)
					{
						for(Organ a: anatomy)
							a.pInvul = true;
						anatomy.get(3).hInvul = true;
						bounds.isGrounded = false;
						floatOverride = true;
						bounds.botOffset = -150;
						
						if(strength == 1)
						{
							if(target != null)
							{
								bounds.isGhost = (target.hitStun == 0);
								if((bounds.xCoord > target.bounds.xCoord+target.bounds.width/2 && isFacingRight) || (bounds.xCoord+bounds.width < target.bounds.xCoord+target.bounds.width/2 && !isFacingRight))
									fCounter = 22+14*(spins-1);
							}
						}
						
						boolean t = ((strength < 2) || (strength == 2 && target == null));
						if(!t)
							t = (target.hitStun > 0);
						if(t)
							bounds.forceArchiver.add(new Force("tatsu",(isFacingRight)? 3:1,speed,speed-3));
						else
						{
							if(f == 4)
								fCounter += 14;
							if(fCounter > 22+14*(spins-1))
								fCounter = 22+14*(spins-1);
						}
					}
				}
				else
				{
					switch(f-14*(spins-1))
					{
						case 22:
							currState = RooState.TATSU_RECOVER;
							floatOverride = false;
							bounds.botOffset = 0;
							sIndex = 0;
							break;
							
						case 27:
					//		bounds.isGrounded = true;
							bounds.isGhost = false;
							break;
					}
				}
			}
		}
	}
	
	public class DragonPunch extends Action
	{
		Roo roo;
		int strength;
		
		public DragonPunch(Roo r, int s)
		{
			super(Action.SPECIAL,1,
				new int[][]{new int[]{}, new int[]{}, new int[]{}},
				new boolean[]{false,false,false},
				new boolean[]{true,true,true},
				new boolean[]{false,false,false},
				new boolean[]{false,false,false},
				new int[]{-1,-1,-1,-1,-1,-1},
				new boolean[]{true,false,false});
			roo = r;
			strength = s;
			scaling = 0.15;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			isCrouching = false;
			
			if(f >= frames)
			{
				isPerformingAction = false;
				return;
			}
			else
			{
				switch(f)
				{
					case 0:
						if(bounds.isGrounded)
						{
							currState = RooState.DP;
							hashCounter = "";
							frames = 60;	//8+((strength < 2)? ((strength == 0)? 22:28):32);
						}
						else
							frames = 1;
						break;
						
					case 1:
						addGuardTrigger(roo,0,bounds.xCoord+70,bounds.yCoord-230,160,340,(strength == 0)? 21:24,roo.isFacingRight,true,true);
						addGuardTrigger(roo,0,bounds.xCoord+70,bounds.yCoord-275,80,385,(strength == 0)? 21:24,roo.isFacingRight,true,true);
						addGuardTrigger(roo,0,bounds.xCoord+70,bounds.yCoord-185,180,365,9,roo.isFacingRight,true,true);
						break;
						
					case 8:
						addPleb(roo,0,bounds.xCoord+bounds.width,bounds.yCoord+40,110,100,2,Pleb.MID,2,(strength < 2)? ((strength == 0)? 85:100):120,25,50,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.KNOCKDOWN,0,1,(strength < 2)? ((strength == 0)? 85:100):120,5,60}});
						break;
						
					case 10:
						bounds.forceArchiver.add(new Force("dp",2,(strength < 2)? ((strength == 0)? 50:56):92,(strength < 2)? 2:4));
						jDirections[0] = (isFacingRight)? 1:-1;
						jDirections[1] = -1;
						addPleb(roo,0,bounds.xCoord+bounds.width-10,bounds.yCoord-180,110,250,2,Pleb.MID,2,(strength < 2)? ((strength == 0)? 85:100):120,25,50,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.KNOCKDOWN,0,1,(strength < 2)? ((strength == 0)? 85:100):120,5,60}});
						break;
						
					case 12:
						if(strength < 2)
							addPleb(roo,0,bounds.xCoord+bounds.width-20,bounds.yCoord-195,55,70,(strength == 0)? 10:13,Pleb.MID,2,(strength < 2)? ((strength == 0)? 85:100):120,25,50,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.KNOCKDOWN,0,1,(strength < 2)? ((strength == 0)? 30:50):70,5,60}});
						else
							addPleb(roo,0,bounds.xCoord+bounds.width-10,bounds.yCoord-180,110,250,13,Pleb.MID,2,120,25,50,0,0.75,true,false,false,true,new double[][]{new double[]{Pleb.KNOCKDOWN,0,1,120,5,60}});
						break;
						
					case 22:
						if(strength == 0)
						{
							currState = RooState.DP_RECOVER;
							sIndex = 0;
							
							if(target == null)
								addSound("freehandouts.wav",new float[]{0.0f});
							else
							{
								if(target.hitStun == 0 && target.kdStun == 0 && target.health > 0 && target.stamina > 0)
									addSound("freehandouts.wav",new float[]{0.0f});
							}
						}
						break;
						
					case 25:
						if(strength == 1 || strength == 2)
						{
							currState = RooState.DP_RECOVER;
							sIndex = 0;
							
							if(target == null)
								addSound("freehandouts.wav",new float[]{0.0f});
							else
							{
								if(target.blockStun == 0 && target.kdStun == 0 && target.health > 0 && target.stamina > 0)
									addSound("freehandouts.wav",new float[]{0.0f});
							}
						}
						break;
				}
				
				if(f < 10)
				{
					for(Organ a: anatomy)
						a.hInvul = true;
				}
				if(currState == RooState.DP)
				{
					for(Organ a: anatomy)
						a.pInvul = true;
					throwInvul = true;
				}
				else if(bounds.isGrounded)
					fCounter = frames;
			}
		}
	}
	
	public class DonkeyKick extends Action
	{
		Roo roo;
		int strength;
		
		public DonkeyKick(Roo r, int s)
		{
			super(Action.SPECIAL,1,
				new int[][]{new int[]{}, new int[]{}, new int[]{}},
				new boolean[]{false,false,false},
				new boolean[]{true,true,true},
				new boolean[]{false,false,false},
				new boolean[]{false,false,false},
				new int[]{-1,-1,-1,-1,-1,-1},
				new boolean[]{true,true,false});
			roo = r;
			strength = s;
			scaling = 0.15;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			isCrouching = false;
			
			if(f >= frames)
			{
				isPerformingAction = false;
				floatOverride = false;
				return;
			}
			else
			{
				switch(f)
				{
					case 0:
						currState = RooState.DONKEYKICK;
						hashCounter = "";
						frames = 32;
						break;
						
					case 1:
						addGuardTrigger(roo,0,bounds.xCoord+bounds.width,bounds.yCoord-45,290,180,14,roo.isFacingRight,true,true);
						break;
						
					case 7:
						bounds.forceArchiver.add(new Force("xDonkey",(isFacingRight)? 3:1,13,1));
						break;
						
					case 10:
						addPleb(roo,0,bounds.xCoord+bounds.width+10,bounds.yCoord+35,70,70,2,Pleb.MID,1,(strength < 2)? ((strength == 0)? 65:85):110,55,50,0,0.15,true,false,false,true,new double[][]{new double[]{Pleb.WALLBOUNCE,0,50,-60,10,-60,20,60}});
						addPleb(roo,0,bounds.xCoord+bounds.width+70,bounds.yCoord+15,70,70,2,Pleb.MID,1,(strength < 2)? ((strength == 0)? 65:85):110,55,50,0,0.15,true,false,false,true,new double[][]{new double[]{Pleb.WALLBOUNCE,0,50,-60,10,-60,20,60}});
						addPleb(roo,0,bounds.xCoord+bounds.width+130,bounds.yCoord-5,70,70,4,Pleb.MID,4,(strength < 2)? ((strength == 0)? 65:85):110,55,50,0,0.15,true,false,false,true,new double[][]{new double[]{Pleb.WALLBOUNCE,0,50,-60,10,-60,20,60}});
						break;
				}
				
				if(f < 21+strength*5)
				{
					for(Force g: bounds.forceArchiver)
					{
						if(g.direction == 2)
							g.magnitude = 0;
					}
					floatOverride = true;
				}
				else if(f == 21+strength*5 && currState == RooState.DONKEYKICK)
				{
					currState = RooState.DONKEYKICK_RECOVER;
					sIndex = 0;
					if(!bounds.isGrounded)
						bounds.forceArchiver.add(new Force("yDonkey",2,20,2));
				}
			}
		}
	}
	
	public class Taunt extends Player.Taunt
	{
		boolean isBella;
		
		public Taunt(Roo r)
		{
			super(r);
			isBella = false;
		}
		
		public void perform(int f)
		{
			if(f == 0)
				isBella = (Math.random()*100 < 10);
			if(isBella)
			{
				setAction(new BellaTaunt(player));
				fCounter = -1;
				sIndex = hitboxArchiver.get(currState.getPosition())[0][1];
				isPerformingAction = true;
				isBella = false;
			}
			else
				super.perform(f);
		}
	}
	
	public class BellaTaunt extends Action
	{
		Player player;
		
		public BellaTaunt(Player p)
		{
			super(Action.TAUNT,0,
					new int[][]{new int[]{}, new int[]{}, new int[]{}},
					new boolean[]{false,false,false},
					new boolean[]{false,false,false},
					new boolean[]{false,false,false},
					new boolean[]{false,false,false},
					new int[]{-1,-1,-1,-1,-1,-1},
					new boolean[]{true,false,true});
			player = p;
		}
		
		public void perform(int f)
		{
			isPerformingAction = true;
			if(f >= frames)
			{
				isPerformingAction = false;
				return;
			}
			else
			{
				switch(f)
				{
					case 0:
						currState = RooState.B_TAUNT;
						frames = 60;
						break;
						
					case 3:
						if(player.target != null)
						{
							if(player.target instanceof Puppet)
							{
								Puppet t = (Puppet)player.target;
								if(t.health > 0)
								{
									t.propertyArchiver.add(new double[]{Pleb.TAYLOR,900,0,0,0});
									if(t.kdStun > 0 && t.bounds.isGrounded)
										t.stamina -= 200;
									
									propertyArchiver.add(new double[]{Pleb.TAYLOR,900,0,0,1});
								}
							}
						}
						break;
				}
			}
		}
	}
	
	
	public class Ninja extends Projectile
	{
		Roo roo;
		int hCount;
		
		public Ninja(Roo r, int x, int y, int w1, int h1, int h2, int h3, int s)
		{
			super(r,x,y,w1,h1,h2,h3,s);
			roo = r;
			hCount = 0;
			
			switch(strength)
			{
				case 0:
					hDamage = 100;
					sDamage = 40;
					speed = 5; 
					break;
				
				case 1:
					hDamage = 100;
					sDamage = 40;
					speed = 9;
					health = 240;
					break;
					
				case 2:
					hDamage = 100;
					sDamage = 25;
					speed = 18;
					health = 120;
					hits = 3;
					break;
			}
			
			spriteParams = new int[]{940,638,640,480};
			spriteArchiver.add(new int[]{0,0,0,0,2});
		}
		
		public void move()
		{
			if(fCounter == 0)
			{
				addGuardTrigger(bounds.xCoord-155,bounds.yCoord-35,365,120,3,roo.isFacingRight,true);
				addPleb(0,bounds.xCoord-155,bounds.yCoord-20,260,90,2,Pleb.MID,(strength < 2)? 1:2,40,40,(strength < 2)? 20:30,0,1,true,false,true,new double[][]{new double[]{Pleb.KNOCKDOWN,(strength < 2)? 1:0,1,(strength < 2)? 21:70,7,60}});
			}
			else if(fCounter > 1)
			{
				if(!isHit)
					bounds.xCoord += (isFacingRight)? speed:-speed;
				if(fCounter >= 2)
				{
					addGuardTrigger(bounds.xCoord+25,bounds.yCoord-35,130,120,2,roo.isFacingRight,true);
					if(hCount != hits)
					{
						if(hits == 1)
							addPleb(hits,bounds.xCoord+25,bounds.yCoord-20,85,90,health,Pleb.MID,1,40,40,20,0,1,true,true,true,new double[][]{new double[]{Pleb.KNOCKDOWN,(strength < 2)? 1:0,1,(strength < 2)? 21:49,7,60}});
						else
							addPleb(hits,bounds.xCoord+25,bounds.yCoord-20,85,90,health,Pleb.MID,2,40,40,20,20,1,true,true,true,new double[][]{});
						hCount = hits;
					}
				}
			}
		}
	}
}